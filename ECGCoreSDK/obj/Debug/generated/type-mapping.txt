com/vivalnk/sdk/aspectj/eventbus/EventTag = Com.Vivalnk.Sdk.Aspectj.Eventbus.IEventTag
  tags()[Ljava/lang/String; = Tags()
com/vivalnk/sdk/base/CommandFactory = Com.Vivalnk.Sdk.Base.CommandFactory
  <init>()V = .ctor()
  createCommand(Lcom/vivalnk/sdk/model/Device;Lcom/vivalnk/sdk/CommandRequest;Lcom/vivalnk/sdk/Callback;)Lcom/vivalnk/sdk/base/RealCommand; = CreateCommand(Com.Vivalnk.Sdk.Model.Device, Com.Vivalnk.Sdk.CommandRequest, Com.Vivalnk.Sdk.ICallback)
com/vivalnk/sdk/base/connect/ConnectResumeStrategy = Com.Vivalnk.Sdk.Base.Connect.ConnectResumeStrategy
  <init>()V = .ctor()
  cacheSize = CacheSize
  dataReceiveTimeOut = DataReceiveTimeOut
  retryGapTime = RetryGapTime
  retryScanTimeOout = RetryScanTimeOout
  retryTotalCount = RetryTotalCount
  getCacheSize()I = CacheSize
  setCacheSize(I)V = CacheSize
  getDataReceiveTimeOut()J = DataReceiveTimeOut
  setDataReceiveTimeOut(J)V = DataReceiveTimeOut
  getRetryGapTime()J = RetryGapTime
  setRetryGapTime(J)V = RetryGapTime
  getRetryScanTimeOout()J = RetryScanTimeOout
  setRetryScanTimeOout(J)V = RetryScanTimeOout
  getRetryTotalCount()J = RetryTotalCount
  setRetryTotalCount(J)V = RetryTotalCount
  intercept()Z = Intercept()
com/vivalnk/sdk/base/ReadHelper = Com.Vivalnk.Sdk.Base.ReadHelper
  <init>()V = .ctor()
  a = A
  b = B
  getInstance()Lcom/vivalnk/sdk/base/ReadHelper; = Instance
  a(Ljava/lang/String;)Z = A(string)
  isOldAck(Lcom/vivalnk/sdk/model/Device;)Z = IsOldAck(Com.Vivalnk.Sdk.Model.Device)
  main([Ljava/lang/String;)V = Main(string[])
  readDeviceInfo(Lcom/vivalnk/sdk/model/Device;Lcom/vivalnk/sdk/base/RealCommand;)V = ReadDeviceInfo(Com.Vivalnk.Sdk.Model.Device, Com.Vivalnk.Sdk.Base.RealCommand)
  readFWVersion(Lcom/vivalnk/sdk/model/Device;Lcom/vivalnk/sdk/base/RealCommand;)V = ReadFWVersion(Com.Vivalnk.Sdk.Model.Device, Com.Vivalnk.Sdk.Base.RealCommand)
com/vivalnk/sdk/base/RealCommand = Com.Vivalnk.Sdk.Base.RealCommand
  <init>(Lcom/vivalnk/sdk/model/Device;Lcom/vivalnk/sdk/CommandRequest;Lcom/vivalnk/sdk/Callback;)V = .ctor(Com.Vivalnk.Sdk.Model.Device, Com.Vivalnk.Sdk.CommandRequest, Com.Vivalnk.Sdk.ICallback)
  c = C
  d = D
  e = E
  g = G
  h = H
  TAG = Tag
  getDevice()Lcom/vivalnk/sdk/model/Device; = Device
  isParameterOK()Z = IsParameterOK
  getRequest()Lcom/vivalnk/sdk/CommandRequest; = Request
  getType()I = Type
  getTypeName()Ljava/lang/String; = TypeName
  a()V = A()
  a(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/String;)Z = A(Java.Lang.Class, Java.Lang.Object, string)
  a(Ljava/lang/Object;Ljava/lang/String;I)Z = A(Java.Lang.Object, string, int)
  execute()V = Execute()
  getCheckSum([I)I = GetCheckSum(int[])
  getCheckSum([III)I = GetCheckSum(int[], int, int)
  getRequestData()[B = GetRequestData()
  handleMessage(Landroid/os/Message;)Z = HandleMessage(Android.OS.Message)
  initCheckSum([I)V = InitCheckSum(int[])
  onCancel()V = OnCancel()
  onCharacterWriteComplete([B)V = OnCharacterWriteComplete(byte[])
  onComplete()V = OnComplete()
  onComplete(Ljava/util/Map;)V = OnComplete(System.Collections.Generic.IDictionary<string, Java.Lang.Object>)
  onDataParseError([B)V = OnDataParseError(byte[])
  onError(ILjava/lang/String;)V = OnError(int, string)
  onResponse([B)V = OnResponse(byte[])
  onStart()V = OnStart()
  parse([B)V = Parse(byte[])
  parseResponse([B)V = ParseResponse(byte[])
com/vivalnk/sdk/ble/channel/ChannelCallback = Com.Vivalnk.Sdk.Ble.Channel.IChannelCallback
  onCharacterWriteComplete([B)V = OnCharacterWriteComplete(byte[])
  onComplete([B)V = OnComplete(byte[])
  onError(ILjava/lang/String;)V = OnError(int, string)
  onStart()V = OnStart()
com/vivalnk/sdk/ble/ota/NotificationActivity = Com.Vivalnk.Sdk.Ble.Ota.NotificationActivity
  <init>()V = .ctor()
  onCreate(Landroid/os/Bundle;)V = OnCreate(Android.OS.Bundle)
com/vivalnk/sdk/ble/ota/OTAListener = Com.Vivalnk.Sdk.Ble.Ota.IOTAListener
com/vivalnk/sdk/ble/ota/OTAManager = Com.Vivalnk.Sdk.Ble.Ota.OTAManager
  <init>()V = .ctor()
  a = A
  b = B
  c = C
  d = D
  e = E
  f = F
  g = G
  h = H
  l = L
  TAG = Tag
  a(Ljava/lang/String;)Ljava/lang/String; = A(string)
  handleMessage(Landroid/os/Message;)Z = HandleMessage(Android.OS.Message)
  registCallback(Lcom/vivalnk/sdk/ble/ota/OTAListener;)Lcom/vivalnk/sdk/ble/ota/OTAManager; = RegistCallback(Com.Vivalnk.Sdk.Ble.Ota.IOTAListener)
  setDevice(Lcom/vivalnk/sdk/model/Device;)Lcom/vivalnk/sdk/ble/ota/OTAManager; = SetDevice(Com.Vivalnk.Sdk.Model.Device)
  setFile(Ljava/io/File;)Lcom/vivalnk/sdk/ble/ota/OTAManager; = SetFile(Java.IO.File)
  setListener(Lcom/vivalnk/sdk/ble/ota/OTAListener;)Lcom/vivalnk/sdk/ble/ota/OTAManager; = SetListener(Com.Vivalnk.Sdk.Ble.Ota.IOTAListener)
  setNofication(Z)Lcom/vivalnk/sdk/ble/ota/OTAManager; = SetNofication(bool)
  setUri(Landroid/net/Uri;)Lcom/vivalnk/sdk/ble/ota/OTAManager; = SetUri(Android.Net.Uri)
  startOTA()V = StartOTA()
  unregistCallback(Lcom/vivalnk/sdk/ble/ota/OTAListener;)Lcom/vivalnk/sdk/ble/ota/OTAManager; = UnregistCallback(Com.Vivalnk.Sdk.Ble.Ota.IOTAListener)
  unregistCallbackAll()Lcom/vivalnk/sdk/ble/ota/OTAManager; = UnregistCallbackAll()
com/vivalnk/sdk/ble/PairRequestReceiver = Com.Vivalnk.Sdk.Ble.PairRequestReceiver
  <init>()V = .ctor()
  a = A
  onReceive(Landroid/content/Context;Landroid/content/Intent;)V = OnReceive(Android.Content.Context, Android.Content.Intent)
com/vivalnk/sdk/BuildConfig = Com.Vivalnk.Sdk.BuildConfig
  <init>()V = .ctor()
  APPLICATION_ID = ApplicationId
  BUILD_TYPE = BuildType
  DEBUG = Debug
  FLAVOR = Flavor
  LIBRARY_PACKAGE_NAME = LibraryPackageName
  VERSION_CODE = VersionCode
  VERSION_NAME = VersionName
com/vivalnk/sdk/Callback = Com.Vivalnk.Sdk.ICallback
com/vivalnk/sdk/command/base/CommandAllType = Com.Vivalnk.Sdk.Command.Base.CommandAllType
  <init>()V = .ctor()
  base_engineer = BaseEngineer
  base_internal = BaseInternal
  closeBaselineAlgorithm = CloseBaselineAlgorithm
  closeFlashSave = CloseFlashSave
  closeRTSSend = CloseRTSSend
  eraseOverFlash = EraseOverFlash
  getAccCalibrationOffset = GetAccCalibrationOffset
  openBaselineAlgorithm = OpenBaselineAlgorithm
  openFlashSave = OpenFlashSave
  openRTSSend = OpenRTSSend
  readOverFlash = ReadOverFlash
  readSecurityKey = ReadSecurityKey
  readSignature = ReadSignature
  sendDataAck = SendDataAck
  sendHeartBeat = SendHeartBeat
  setAccCalibrationOffset = SetAccCalibrationOffset
  startAccCalibration = StartAccCalibration
  stopAccCalibration = StopAccCalibration
  switchMode = SwitchMode
  switchSamplingMode = SwitchSamplingMode
  writeHWVersion = WriteHWVersion
  writeRFToPath = WriteRFToPath
  writeSecurityKey = WriteSecurityKey
  writeSnToPath = WriteSnToPath
  createCommand(Lcom/vivalnk/sdk/model/Device;Lcom/vivalnk/sdk/CommandRequest;Lcom/vivalnk/sdk/Callback;)Lcom/vivalnk/sdk/base/RealCommand; = CreateCommand(Com.Vivalnk.Sdk.Model.Device, Com.Vivalnk.Sdk.CommandRequest, Com.Vivalnk.Sdk.ICallback)
  getTypeName(I)Ljava/lang/String; = GetTypeName(int)
com/vivalnk/sdk/command/base/CommandType = Com.Vivalnk.Sdk.Command.Base.CommandType
  <init>()V = .ctor()
  base_common = BaseCommon
  cancelUploadFlash = CancelUploadFlash
  checkFlashDataStatus = CheckFlashDataStatus
  checkPatchStatus = CheckPatchStatus
  eraseFlash = EraseFlash
  eraseUserInfoFromFlash = EraseUserInfoFromFlash
  readDeviceInfo = ReadDeviceInfo
  readPatchVersion = ReadPatchVersion
  readSnFromPatch = ReadSnFromPatch
  readUserInfoFromFlash = ReadUserInfoFromFlash
  selfTest = SelfTest
  setPatchClock = SetPatchClock
  setUserInfoToFlash = SetUserInfoToFlash
  shutdown = Shutdown
  startOTA = StartOTA
  startSampling = StartSampling
  stopSampling = StopSampling
  unknow = Unknow
  uploadFlash = UploadFlash
  getTypeName(I)Ljava/lang/String; = GetTypeName(int)
com/vivalnk/sdk/CommandRequest = Com.Vivalnk.Sdk.CommandRequest
  <init>(Lcom/vivalnk/sdk/CommandRequest$Builder;)V = .ctor(Com.Vivalnk.Sdk.CommandRequest.Builder)
  DEFAULT_MIN_TIME_OUT = DefaultMinTimeOut
  loggable = Loggable
  params = Params
  timeout = Timeout
  type = Type
  isLoggable()Z = IsLoggable
  getParams()Ljava/util/Map; = Params
  getTimeout()J = Timeout
  getType()I = Type
  getTypeName()Ljava/lang/String; = TypeName
com/vivalnk/sdk/constant/VitalConstant = Com.Vivalnk.Sdk.Constant.VitalConstant
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
com/vivalnk/sdk/core/audio/MathImage = Com.Vivalnk.Sdk.Core.Audio.MathImage
  <init>()V = .ctor()
  DoubleResize([[DIIII)[[D = DoubleResize(double[][], int, int, int, int)
com/vivalnk/sdk/core/audio/STFT = Com.Vivalnk.Sdk.Core.Audio.STFT
  <init>()V = .ctor()
  transform([DI)[[D = Transform(double[], int)
com/vivalnk/sdk/core/baseline/BaselineFilter = Com.Vivalnk.Sdk.Core.Baseline.BaselineFilter
  <init>()V = .ctor()
  filter([D)[D = Filter(double[])
com/vivalnk/sdk/core/bp/StackHandlerThread = Com.Vivalnk.Sdk.Core.BP.StackHandlerThread
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;J)V = .ctor(string, long)
  mHandler = MHandler
  mLooper = MLooper
  mPriority = MPriority
  mTid = MTid
  getLooper()Landroid/os/Looper; = Looper
  getThreadHandler()Landroid/os/Handler; = ThreadHandler
  getThreadId()I = ThreadId
  onLooperPrepared()V = OnLooperPrepared()
  quit()Z = Quit()
  quitSafely()Z = QuitSafely()
com/vivalnk/sdk/core/hr/HRResult = Com.Vivalnk.Sdk.Core.HR.HRResult
  <init>()V = .ctor()
  dest_rri = DestRri
  hr = Hr
  is_modified = IsModified
  rri_buffer = RriBuffer
  src_rri = SrcRri
com/vivalnk/sdk/core/rr/NewRR = Com.Vivalnk.Sdk.Core.RR.NewRR
  <init>()V = .ctor()
  a = A
  b = B
  c = C
  d = D
  e = E
  f = F
  a()F = A()
  a([F)[D = A(float[])
  a(I)I = A(int)
  a(ILcom/vivalnk/sdk/model/SampleData;)F = A(int, Com.Vivalnk.Sdk.Model.SampleData)
  a([I)I = A(int[])
  b()V = B()
  c()V = C()
  d()V = D()
  newrr_append_ecg(I[DI[III[I[I[I)D = Newrr_append_ecg(int, double[], int, int[], int, int, int[], int[], int[])
  newrr_get_moving_average(I)D = Newrr_get_moving_average(int)
  newrr_get_use_acc_result(I)I = Newrr_get_use_acc_result(int)
  newrr_get_use_fft_fusion(I)I = Newrr_get_use_fft_fusion(int)
  newrr_new()I = Newrr_new()
  newrr_release(I)V = Newrr_release(int)
  newrr_set_cal_rwl(II)V = Newrr_set_cal_rwl(int, int)
  newrr_set_hz(II)I = Newrr_set_hz(int, int)
com/vivalnk/sdk/core/VivalnkLibrary = Com.Vivalnk.Sdk.Core.VivalnkLibrary
  <init>()V = .ctor()
  afib_init_code = AfibInitCode
  pause_init_code = PauseInitCode
  aes128_Decrypt([B)[B = Aes128_Decrypt(byte[])
  aes128_Encrypt([B)[B = Aes128_Encrypt(byte[])
  aes128_init(Ljava/lang/String;Ljava/lang/String;)V = Aes128_init(string, string)
  afib_init(Ljava/lang/String;Ljava/lang/String;)I = Afib_init(string, string)
  afib_predict([D)I = Afib_predict(double[])
  calculatePercentage(ILcom/vivalnk/sdk/model/BatteryInfo$ChargeStatus;)I = CalculatePercentage(int, Com.Vivalnk.Sdk.Model.BatteryInfo.ChargeStatus)
  detectActivity([F[F[F[S)Z = DetectActivity(float[], float[], float[], short[])
  detectAfib([D)[I = DetectAfib(double[])
  estimate_bp([[I[[I[[I[[I[[I)[I = Estimate_bp(int[][], int[][], int[][], int[][], int[][])
  estimate_init_calibrate([[I[[I[[I[[I[[IIIIIIII)V = Estimate_init_calibrate(int[][], int[][], int[][], int[][], int[][], int, int, int, int, int, int, int)
  filterEcg([FZ)[F = FilterEcg(float[], bool)
  pause_init(Ljava/lang/String;Ljava/lang/String;)I = Pause_init(string, string)
  pause_predict([D)I = Pause_predict(double[])
com/vivalnk/sdk/data/DataJsonConverter = Com.Vivalnk.Sdk.Data.DataJsonConverter
  <init>()V = .ctor()
  fromJson(Ljava/lang/String;)Lcom/vivalnk/sdk/data/DataJsonConverter$DataFormated; = FromJson(string)
  toFullJson(Lcom/vivalnk/sdk/data/DataJsonConverter$DataFormated;)Ljava/lang/String; = ToFullJson(Com.Vivalnk.Sdk.Data.DataJsonConverter.DataFormated)
  toSimpleJson(Lcom/vivalnk/sdk/data/DataJsonConverter$DataFormated;)Ljava/lang/String; = ToSimpleJson(Com.Vivalnk.Sdk.Data.DataJsonConverter.DataFormated)
com/vivalnk/sdk/data/stream/afib/EventHandler = Com.Vivalnk.Sdk.Data.Stream.Afib.EventHandler
  <init>()V = .ctor()
  <init>(Z)V = .ctor(bool)
  afib_ranger_out = AfibRangerOut
  afib_small_data = AfibSmallData
  flash = Flash
  logFilePath = LogFilePath
  logFilePathFlash = LogFilePathFlash
  pause_ranger_out = PauseRangerOut
  pause_small_data = PauseSmallData
  sLoggable = SLoggable
  addDataList(Lcom/vivalnk/sdk/model/Device;Ljava/util/ArrayList;)Ljava/util/List; = AddDataList(Com.Vivalnk.Sdk.Model.Device, System.Collections.Generic.IList<Com.Vivalnk.Sdk.Model.SampleData>)
  addEventData(Lcom/vivalnk/sdk/model/Device;Lcom/vivalnk/sdk/model/SampleData;Lcom/vivalnk/sdk/DataReceiveListener;)Lcom/vivalnk/sdk/model/Event; = AddEventData(Com.Vivalnk.Sdk.Model.Device, Com.Vivalnk.Sdk.Model.SampleData, Com.Vivalnk.Sdk.IDataReceiveListener)
  copy(Ljava/lang/String;)Ljava/lang/String; = Copy(string)
  detectAfib([I)[I = DetectAfib(int[])
  getEvent(Lcom/vivalnk/sdk/model/Device;Lcom/vivalnk/sdk/model/Event$EventType;Ljava/util/ArrayList;Z)Lcom/vivalnk/sdk/model/Event; = GetEvent(Com.Vivalnk.Sdk.Model.Device, Com.Vivalnk.Sdk.Model.Event.EventType, System.Collections.Generic.IList<Com.Vivalnk.Sdk.Model.SampleData>, bool)
  handlePauseEvent(Lcom/vivalnk/sdk/model/Device;Lcom/vivalnk/sdk/DataReceiveListener;Ljava/util/ArrayList;[DZ)Lcom/vivalnk/sdk/model/Event; = HandlePauseEvent(Com.Vivalnk.Sdk.Model.Device, Com.Vivalnk.Sdk.IDataReceiveListener, System.Collections.Generic.IList<Com.Vivalnk.Sdk.Model.SampleData>, double[], bool)
  isPauseValid(Ljava/util/List;)Z = IsPauseValid(System.Collections.Generic.IList<Com.Vivalnk.Sdk.Model.SampleData>)
  log(Ljava/lang/String;Z)V = Log(string, bool)
  publishEvent(Lcom/vivalnk/sdk/model/Device;Lcom/vivalnk/sdk/DataReceiveListener;Lcom/vivalnk/sdk/model/Event;)V = PublishEvent(Com.Vivalnk.Sdk.Model.Device, Com.Vivalnk.Sdk.IDataReceiveListener, Com.Vivalnk.Sdk.Model.Event)
  setLoggable(Z)V = SetLoggable(bool)
  setStartCondition(II)V = SetStartCondition(int, int)
com/vivalnk/sdk/data/stream/packagelost/DisContinuousEvent = Com.Vivalnk.Sdk.Data.Stream.Packagelost.DisContinuousEvent
  <init>(Lcom/vivalnk/sdk/model/Device;ZJJLjava/lang/String;)V = .ctor(Com.Vivalnk.Sdk.Model.Device, bool, long, long, string)
  curTime = CurTime
  device = Device
  flash = Flash
  msg = Msg
  preTime = PreTime
  sOpenEvent = SOpenEvent
  closeEvent()V = CloseEvent()
  openEvent()V = OpenEvent()
com/vivalnk/sdk/dataparser/battery/Battery = Com.Vivalnk.Sdk.Dataparser.Battery.Battery
  <init>()V = .ctor()
  BAT_VOL_MILL_V0 = BatVolMillV0
  BAT_VOL_MILL_V1 = BatVolMillV1
  BAT_VOL_MILL_V2 = BatVolMillV2
  BAT_VOL_MILL_V3 = BatVolMillV3
  timeUnitTable = TimeUnitTable
  VL_1 = Vl1
  VL_2 = Vl2
  VL_3 = Vl3
  VL_4 = Vl4
  VL_5 = Vl5
  VOLTAGE_MAX = VoltageMax
  VOLTAGE_MIN = VoltageMin
  voltageTable = VoltageTable
  getPercent(D)D = GetPercent(double)
com/vivalnk/sdk/dataparser/vv330/ReceiveDataParser_VV330 = Com.Vivalnk.Sdk.Dataparser.Vv330.ReceiveDataParser_VV330
  <init>(Lcom/vivalnk/sdk/model/Device;Lcom/vivalnk/sdk/DataReceiveListener;)V = .ctor(Com.Vivalnk.Sdk.Model.Device, Com.Vivalnk.Sdk.IDataReceiveListener)
  c = C
  d = D
  a()V = A()
  a(Z)V = A(bool)
  a(BB[B)Lcom/vivalnk/sdk/model/BatteryInfo; = A(sbyte, sbyte, byte[])
  a([B)V = A(byte[])
  a(Lcom/vivalnk/sdk/model/Device;Z)V = A(Com.Vivalnk.Sdk.Model.Device, bool)
  a(Lcom/vivalnk/sdk/model/Person;)V = A(Com.Vivalnk.Sdk.Model.Person)
  a(J)V = A(long)
  b()V = B()
  b([B)V = B(byte[])
  c()V = C()
  c([B)Z = C(byte[])
  onDataFeedEvent(Lcom/vivalnk/sdk/dataparser/vv330/ReceiveDataParser_VV330$DataFeedEvent;)V = OnDataFeedEvent(Com.Vivalnk.Sdk.Dataparser.Vv330.ReceiveDataParser_VV330.DataFeedEvent)
com/vivalnk/sdk/DataReceiveListener = Com.Vivalnk.Sdk.IDataReceiveListener
com/vivalnk/sdk/model/BatteryInfo = Com.Vivalnk.Sdk.Model.BatteryInfo
  <init>(BB[B)V = .ctor(sbyte, sbyte, byte[])
  level = Level
  notifyStr = NotifyStr
  percent = Percent
  rawVoltage = RawVoltage
  serialVersionUID = SerialVersionUID
  status = Status
  temperature = Temperature
  voltage = Voltage
  getLevel()I = Level
  setLevel(I)V = Level
  getNotifyStr()Ljava/lang/String; = NotifyStr
  setNotifyStr(Ljava/lang/String;)V = NotifyStr
  getPercent()I = Percent
  setPercent(I)V = Percent
  getStatus()Lcom/vivalnk/sdk/model/BatteryInfo$ChargeStatus; = Status
  setStatus(Lcom/vivalnk/sdk/model/BatteryInfo$ChargeStatus;)V = Status
  getTemperature()Ljava/lang/Integer; = Temperature
  setTemperature(Ljava/lang/Integer;)V = Temperature
  getVoltage()I = Voltage
  setVoltage(I)V = Voltage
  canBleTransmission()Z = CanBleTransmission()
  canOTA()Z = CanOTA()
  canSampling()Z = CanSampling()
  getLevelDiscription(I)Ljava/lang/String; = GetLevelDiscription(int)
  getLevelString(I)Ljava/lang/String; = GetLevelString(int)
  getStatusString(Lcom/vivalnk/sdk/model/BatteryInfo$ChargeStatus;)Ljava/lang/String; = GetStatusString(Com.Vivalnk.Sdk.Model.BatteryInfo.ChargeStatus)
  needWarming()Z = NeedWarming()
  parseLevel(Lcom/vivalnk/sdk/model/BatteryInfo$ChargeStatus;I)I = ParseLevel(Com.Vivalnk.Sdk.Model.BatteryInfo.ChargeStatus, int)
  parseStatus(B)Lcom/vivalnk/sdk/model/BatteryInfo$ChargeStatus; = ParseStatus(sbyte)
  parseTemerature(B)I = ParseTemerature(sbyte)
  parseVoltage(BB)I = ParseVoltage(sbyte, sbyte)
  parseVoltage([B)I = ParseVoltage(byte[])
  parseVoltage(I)I = ParseVoltage(int)
  toShortString()Ljava/lang/String; = ToShortString()
com/vivalnk/sdk/model/common/DataComparable = Com.Vivalnk.Sdk.Model.Common.IDataComparable
com/vivalnk/sdk/model/common/DataSerializer = Com.Vivalnk.Sdk.Model.Common.IDataSerializer
com/vivalnk/sdk/model/common/DataType = Com.Vivalnk.Sdk.Model.Common.DataType
  <init>()V = .ctor()
  sDataTypeMap = SDataTypeMap
  getDataTypeMap()Ljava/util/Map; = DataTypeMap
  setDataTypeMap(Ljava/util/Map;)V = DataTypeMap
  getDataType(Ljava/lang/String;)Ljava/lang/Class; = GetDataType(string)
com/vivalnk/sdk/model/common/IVitalData = Com.Vivalnk.Sdk.Model.Common.IVitalData
  <init>()V = .ctor()
  getAccAccuracy()I = AccAccuracy
  setAccAccuracy(I)V = AccAccuracy
  getAverageRR()Ljava/lang/Float; = AverageRR
  setAverageRR(Ljava/lang/Float;)V = AverageRR
  getDeviceID()Ljava/lang/String; = DeviceID
  setDeviceID(Ljava/lang/String;)V = DeviceID
  getDeviceModel()Lcom/vivalnk/sdk/model/DeviceModel; = DeviceModel
  setDeviceModel(Lcom/vivalnk/sdk/model/DeviceModel;)V = DeviceModel
  getDeviceName()Ljava/lang/String; = DeviceName
  setDeviceName(Ljava/lang/String;)V = DeviceName
  getDeviceSN()Ljava/lang/String; = DeviceSN
  setDeviceSN(Ljava/lang/String;)V = DeviceSN
  getExtras()Ljava/util/Map; = Extras
  setExtras(Ljava/util/Map;)V = Extras
  getHR()Ljava/lang/Integer; = HR
  setHR(Ljava/lang/Integer;)V = HR
  getId()J = Id
  setId(J)V = Id
  getMagnification()I = Magnification
  setMagnification(I)V = Magnification
  getRR()Ljava/lang/Float; = RR
  setRR(Ljava/lang/Float;)V = RR
  getTemperature()Ljava/lang/Float; = Temperature
  setTemperature(Ljava/lang/Float;)V = Temperature
  getTime()Ljava/lang/Long; = Time
  setTime(Ljava/lang/Long;)V = Time
  addACC([Lcom/vivalnk/sdk/model/Motion;)V = AddACC(params Com.Vivalnk.Sdk.Model.Motion[])
  addECG([I)V = AddECG(params int[])
  addRRI([I)V = AddRRI(params int[])
  addRWL([I)V = AddRWL(params int[])
  format()Lcom/vivalnk/sdk/data/DataJsonConverter$DataFormated; = Format()
  getACC()[Lcom/vivalnk/sdk/model/Motion; = GetACC()
  getData(Ljava/lang/String;)Ljava/lang/Object; = GetData(string)
  getECG()[I = GetECG()
  getRealEcgValue()[F = GetRealEcgValue()
  getRRI()[I = GetRRI()
  getRWL()[I = GetRWL()
  initWithFormated(Lcom/vivalnk/sdk/data/DataJsonConverter$DataFormated;)V = InitWithFormated(Com.Vivalnk.Sdk.Data.DataJsonConverter.DataFormated)
  isActivity()Ljava/lang/Boolean; = IsActivity()
  isFlash()Ljava/lang/Boolean; = IsFlash()
  isFromSameDevice(Lcom/vivalnk/sdk/model/common/IVitalData;)Z = IsFromSameDevice(Com.Vivalnk.Sdk.Model.Common.IVitalData)
  isLeadOn()Ljava/lang/Boolean; = IsLeadOn()
  putData(Ljava/lang/String;Ljava/lang/Object;)V = PutData(string, Java.Lang.Object)
  removeData(Ljava/lang/String;)V = RemoveData(string)
  setACC([Lcom/vivalnk/sdk/model/Motion;)V = SetACC(Com.Vivalnk.Sdk.Model.Motion[])
  setActivity(Ljava/lang/Boolean;)V = SetActivity(Java.Lang.Boolean)
  setECG([I)V = SetECG(int[])
  setFlash(Ljava/lang/Boolean;)V = SetFlash(Java.Lang.Boolean)
  setLeadOn(Ljava/lang/Boolean;)V = SetLeadOn(Java.Lang.Boolean)
  setRRI([I)V = SetRRI(int[])
  setRWL([I)V = SetRWL(int[])
  toFullString()Ljava/lang/String; = ToFullString()
  toSimpleString()Ljava/lang/String; = ToSimpleString()
com/vivalnk/sdk/model/common/IVitalDevice = Com.Vivalnk.Sdk.Model.Common.IVitalDevice
  getDeviceID()Ljava/lang/String; = DeviceID
  setDeviceID(Ljava/lang/String;)V = DeviceID
  getDeviceInfo()Ljava/lang/String; = DeviceInfo
  setDeviceInfo(Ljava/lang/String;)V = DeviceInfo
  getDeviceModel()Lcom/vivalnk/sdk/model/DeviceModel; = DeviceModel
  setDeviceModel(Lcom/vivalnk/sdk/model/DeviceModel;)V = DeviceModel
  getDeviceName()Ljava/lang/String; = DeviceName
  setDeviceName(Ljava/lang/String;)V = DeviceName
  getDeviceSN()Ljava/lang/String; = DeviceSN
  setDeviceSN(Ljava/lang/String;)V = DeviceSN
  getFwVersion()Ljava/lang/String; = FwVersion
  setFwVersion(Ljava/lang/String;)V = FwVersion
  getHwVersion()Ljava/lang/String; = HwVersion
  setHwVersion(Ljava/lang/String;)V = HwVersion
  getId()J = Id
  setId(J)V = Id
com/vivalnk/sdk/model/Device = Com.Vivalnk.Sdk.Model.Device
  <init>(Landroid/bluetooth/BluetoothDevice;)V = .ctor(Android.Bluetooth.BluetoothDevice)
  <init>(Lcom/vivalnk/sdk/model/Device;)V = .ctor(Com.Vivalnk.Sdk.Model.Device)
  <init>(Lcom/vivalnk/sdk/repository/local/database/VitalDevice;)V = .ctor(Com.Vivalnk.Sdk.Repository.Local.Database.VitalDevice)
  <init>(Ljava/lang/String;Ljava/lang/String;I)V = .ctor(string, string, int)
  id = Id
  name = Name
  rssi = Rssi
  serialVersionUID = SerialVersionUID
  getId()Ljava/lang/String; = Id
  setId(Ljava/lang/String;)V = Id
  getName()Ljava/lang/String; = Name
  setName(Ljava/lang/String;)V = Name
  getRssi()I = Rssi
  setRssi(I)V = Rssi
com/vivalnk/sdk/model/DeviceInfoUtils = Com.Vivalnk.Sdk.Model.DeviceInfoUtils
  <init>()V = .ctor()
  getAccSamplingAccuracy(Ljava/util/Map;)I = GetAccSamplingAccuracy(System.Collections.Generic.IDictionary<string, Java.Lang.Object>)
  getAccSamplingFrequency(Ljava/util/Map;)I = GetAccSamplingFrequency(System.Collections.Generic.IDictionary<string, Java.Lang.Object>)
  getMagnification(Ljava/util/Map;)I = GetMagnification(System.Collections.Generic.IDictionary<string, Java.Lang.Object>)
  getManufacturer(Ljava/util/Map;)Ljava/lang/String; = GetManufacturer(System.Collections.Generic.IDictionary<string, Java.Lang.Object>)
  getModel(Ljava/util/Map;)Ljava/lang/String; = GetModel(System.Collections.Generic.IDictionary<string, Java.Lang.Object>)
  getSamplingFrequency(Ljava/util/Map;)I = GetSamplingFrequency(System.Collections.Generic.IDictionary<string, Java.Lang.Object>)
  hasHR(Ljava/util/Map;)Z = HasHR(System.Collections.Generic.IDictionary<string, Java.Lang.Object>)
  isEncryption(Ljava/util/Map;)Z = IsEncryption(System.Collections.Generic.IDictionary<string, Java.Lang.Object>)
com/vivalnk/sdk/model/DeviceModel = Com.Vivalnk.Sdk.Model.DeviceModel
  <init>(III)V = .ctor(int, int, int)
  Unknown = Unknown
  value = Value
  VV200 = Vv200
  VV310 = Vv310
  VV310_1 = Vv3101
  VV330 = Vv330
  VV340 = Vv340
  VVBP = Vvbp
  valueOf(I)Lcom/vivalnk/sdk/model/DeviceModel; = ValueOf(int)
  valueOf(Ljava/lang/String;)Lcom/vivalnk/sdk/model/DeviceModel; = ValueOf(string)
  values()[Lcom/vivalnk/sdk/model/DeviceModel; = Values()
com/vivalnk/sdk/model/Event = Com.Vivalnk.Sdk.Model.Event
  <init>()V = .ctor()
  dataList = DataList
  device = Device
  endTime = EndTime
  eventId = EventId
  eventTag = EventTag
  eventType = EventType
  extras = Extras
  flash = Flash
  startTime = StartTime
  getAvgHeartRate()D = AvgHeartRate
  getDataList()Ljava/util/ArrayList; = DataList
  getDevice()Lcom/vivalnk/sdk/model/Device; = Device
  getEndTime()Ljava/lang/Long; = EndTime
  getEventId()J = EventId
  setEventId(J)V = EventId
  getEventTag()Lcom/vivalnk/sdk/model/Event$Tag; = EventTag
  setEventTag(Lcom/vivalnk/sdk/model/Event$Tag;)V = EventTag
  getStartTime()Ljava/lang/Long; = StartTime
  addData(Lcom/vivalnk/sdk/model/SampleData;)V = AddData(Com.Vivalnk.Sdk.Model.SampleData)
  getEventType()Lcom/vivalnk/sdk/model/Event$EventType; = GetEventType()
com/vivalnk/sdk/model/Motion = Com.Vivalnk.Sdk.Model.Motion
  <init>(III)V = .ctor(int, int, int)
  <init>(IIII)V = .ctor(int, int, int, int)
  offset = Offset
  serialVersionUID = SerialVersionUID
  x = X
  y = Y
  z = Z
  getOffset()Ljava/lang/Integer; = Offset
  getX()I = GetX()
  getY()I = GetY()
  getZ()I = GetZ()
com/vivalnk/sdk/model/Patch = Com.Vivalnk.Sdk.Model.Patch
  <init>()V = .ctor()
  accSamplingAccuracy = AccSamplingAccuracy
  accSamplingFrequency = AccSamplingFrequency
  deviceInfo = DeviceInfo
  ecgSamplingFrequency = EcgSamplingFrequency
  encryption = Encryption
  fwVersion = FwVersion
  hasHR = HasHR
  hwVersion = HwVersion
  magnification = Magnification
  manufacturer = Manufacturer
  model = Model
  MODEL_VV310 = ModelVv310
  MODEL_VV330 = ModelVv330
  sn = Sn
  statusInfo = StatusInfo
  getAccSamplingAccuracy()I = AccSamplingAccuracy
  setAccSamplingAccuracy(I)V = AccSamplingAccuracy
  getAccSamplingFrequency()I = AccSamplingFrequency
  setAccSamplingFrequency(I)V = AccSamplingFrequency
  getDeviceInfo()Ljava/util/Map; = DeviceInfo
  setDeviceInfo(Ljava/util/Map;)V = DeviceInfo
  getEcgSamplingFrequency()I = EcgSamplingFrequency
  setEcgSamplingFrequency(I)V = EcgSamplingFrequency
  isEncryption()Z = Encryption
  setEncryption(Z)V = Encryption
  getFwVersion()Ljava/lang/String; = FwVersion
  setFwVersion(Ljava/lang/String;)V = FwVersion
  hasHR()Z = HasHR
  setHasHR(Z)V = HasHR
  getHwVersion()Ljava/lang/String; = HwVersion
  setHwVersion(Ljava/lang/String;)V = HwVersion
  isVV200()Z = IsVV200
  isVV310()Z = IsVV310
  isVV330()Z = IsVV330
  isVV340()Z = IsVV340
  isVVBP()Z = IsVVBP
  getMagnification()I = Magnification
  setMagnification(I)V = Magnification
  getManufacturer()Ljava/lang/String; = Manufacturer
  setManufacturer(Ljava/lang/String;)V = Manufacturer
  getModel()Lcom/vivalnk/sdk/model/DeviceModel; = Model
  setModel(Lcom/vivalnk/sdk/model/DeviceModel;)V = Model
  getSamplingFrequency()I = SamplingFrequency
  setSamplingFrequency(I)V = SamplingFrequency
  getSn()Ljava/lang/String; = Sn
  setSn(Ljava/lang/String;)V = Sn
  getStatusInfo()Ljava/util/Map; = StatusInfo
  setStatusInfo(Ljava/util/Map;)V = StatusInfo
  setModel(Ljava/lang/String;)V = SetModel(string)
com/vivalnk/sdk/model/PatchStatusInfo = Com.Vivalnk.Sdk.Model.PatchStatusInfo
  <init>()V = .ctor()
  baseLineAlgoOpen = BaseLineAlgoOpen
  batteryInfo = BatteryInfo
  leadOn = LeadOn
  mode = Mode
  RTSDataOpen = RTSDataOpen
  RTSFlashSave = RTSFlashSave
  sampleFrequency = SampleFrequency
  sampling = Sampling
  serialVersionUID = SerialVersionUID
  uploading = Uploading
  getBaseLineAlgoOpen()Ljava/lang/Boolean; = BaseLineAlgoOpen
  setBaseLineAlgoOpen(Ljava/lang/Boolean;)V = BaseLineAlgoOpen
  getBatteryInfo()Lcom/vivalnk/sdk/model/BatteryInfo; = BatteryInfo
  setBatteryInfo(Lcom/vivalnk/sdk/model/BatteryInfo;)V = BatteryInfo
  getMode()Lcom/vivalnk/sdk/model/WorkMode; = Mode
  setMode(Lcom/vivalnk/sdk/model/WorkMode;)V = Mode
  getRTSDataOpen()Ljava/lang/Boolean; = RTSDataOpen
  setRTSDataOpen(Ljava/lang/Boolean;)V = RTSDataOpen
  getRTSFlashSave()Ljava/lang/Boolean; = RTSFlashSave
  setRTSFlashSave(Ljava/lang/Boolean;)V = RTSFlashSave
  getUploading()Ljava/lang/Boolean; = Uploading
  setUploading(Ljava/lang/Boolean;)V = Uploading
  getSampleFrequency()Lcom/vivalnk/sdk/model/PatchStatusInfo$SampleFrequency; = GetSampleFrequency()
  isLeadOn()Ljava/lang/Boolean; = IsLeadOn()
  isSampling()Ljava/lang/Boolean; = IsSampling()
  setLeadOn(Ljava/lang/Boolean;)V = SetLeadOn(Java.Lang.Boolean)
  setSampleFrequency(Lcom/vivalnk/sdk/model/PatchStatusInfo$SampleFrequency;)V = SetSampleFrequency(Com.Vivalnk.Sdk.Model.PatchStatusInfo.SampleFrequency)
  setSampling(Ljava/lang/Boolean;)V = SetSampling(Java.Lang.Boolean)
com/vivalnk/sdk/model/Person = Com.Vivalnk.Sdk.Model.Person
  <init>(Ljava/lang/String;Ljava/lang/String;ILcom/vivalnk/sdk/model/Person$Gender;IILcom/vivalnk/sdk/model/Person$Ethnicity;)V = .ctor(string, string, int, Com.Vivalnk.Sdk.Model.Person.Gender, int, int, Com.Vivalnk.Sdk.Model.Person.Ethnicity)
  age = Age
  ethnicity = Ethnicity
  gender = Gender
  height = Height
  id = Id
  name = Name
  position = Position
  weight = Weight
  getKey()Ljava/lang/String; = Key
com/vivalnk/sdk/model/SampleData = Com.Vivalnk.Sdk.Model.SampleData
  <init>()V = .ctor()
  <init>(Lcom/vivalnk/sdk/data/DataJsonConverter$DataFormated;)V = .ctor(Com.Vivalnk.Sdk.Data.DataJsonConverter.DataFormated)
  <init>(Lcom/vivalnk/sdk/model/common/IVitalData;)V = .ctor(Com.Vivalnk.Sdk.Model.Common.IVitalData)
  deviceID = DeviceID
  deviceModel = DeviceModel
  deviceName = DeviceName
  deviceSN = DeviceSN
  extras = Extras
  id = Id
  time = Time
  getAverageRr()Ljava/lang/Float; = AverageRr
  getDeviceID()Ljava/lang/String; = DeviceID
  setDeviceID(Ljava/lang/String;)V = DeviceID
  getDeviceModel()Lcom/vivalnk/sdk/model/DeviceModel; = DeviceModel
  setDeviceModel(Lcom/vivalnk/sdk/model/DeviceModel;)V = DeviceModel
  getDeviceName()Ljava/lang/String; = DeviceName
  setDeviceName(Ljava/lang/String;)V = DeviceName
  getDeviceSN()Ljava/lang/String; = DeviceSN
  setDeviceSN(Ljava/lang/String;)V = DeviceSN
  getExtras()Ljava/util/Map; = Extras
  setExtras(Ljava/util/Map;)V = Extras
  getHr()Ljava/lang/Integer; = Hr
  getId()J = Id
  setId(J)V = Id
  getRr()Ljava/lang/Float; = Rr
  getTime()Ljava/lang/Long; = Time
  setTime(Ljava/lang/Long;)V = Time
  clone()Lcom/vivalnk/sdk/model/SampleData; = Clone()
  setAcc([Lcom/vivalnk/sdk/model/Motion;)V = SetAcc(Com.Vivalnk.Sdk.Model.Motion[])
  setEcg([I)V = SetEcg(int[])
  setRri([I)V = SetRri(int[])
  setRwl([I)V = SetRwl(int[])
  toFileString()Ljava/lang/String; = ToFileString()
com/vivalnk/sdk/model/WorkMode = Com.Vivalnk.Sdk.Model.WorkMode
  <init>(Ljava/lang/String;I)V = .ctor(string, int)
  ONE_RRIACC = OneRriacc
  THREE_RRI = ThreeRri
  TWO_RRIECG = TwoRriecg
  ZERO_ECGACC = ZeroEcgacc
  valueOf(I)Lcom/vivalnk/sdk/model/WorkMode; = ValueOf(int)
  valueOf(Ljava/lang/String;)Lcom/vivalnk/sdk/model/WorkMode; = ValueOf(string)
  values()[Lcom/vivalnk/sdk/model/WorkMode; = Values()
com/vivalnk/sdk/open/BloodPressure = Com.Vivalnk.Sdk.Open.BloodPressure
  <init>(II)V = .ctor(int, int)
  diastolic = Diastolic
  systolic = Systolic
com/vivalnk/sdk/open/BPManager = Com.Vivalnk.Sdk.Open.BPManager
  <init>(Lcom/vivalnk/sdk/open/BPManager$BPResultListener;)V = .ctor(Com.Vivalnk.Sdk.Open.BPManager.IBPResultListener)
  a = A
  b = B
  c = C
  d = D
  e = E
  f = F
  g = G
  h = H
  i = I
  j = J
  k = K
  l = L
  m = M
  TAG = Tag
  addSampleData(Lcom/vivalnk/sdk/model/SampleData;)Z = AddSampleData(Com.Vivalnk.Sdk.Model.SampleData)
  estimiate_bp()V = Estimiate_bp()
  initCalibrationData(II)V = InitCalibrationData(int, int)
  initUserInfo(Lcom/vivalnk/sdk/model/Person;)Z = InitUserInfo(Com.Vivalnk.Sdk.Model.Person)
com/vivalnk/sdk/open/BPPrinter = Com.Vivalnk.Sdk.Open.BPPrinter
  <init>()V = .ctor()
  a = A
  b = B
  a(Lcom/vivalnk/sdk/model/Person;Lcom/vivalnk/sdk/open/DataSet;[I)V = A(Com.Vivalnk.Sdk.Model.Person, Com.Vivalnk.Sdk.Open.DataSet, int[])
  a(Lcom/vivalnk/sdk/model/Person;Lcom/vivalnk/sdk/open/DataSet;[ILjava/lang/String;)V = A(Com.Vivalnk.Sdk.Model.Person, Com.Vivalnk.Sdk.Open.DataSet, int[], string)
  a(Lcom/vivalnk/sdk/open/DataSet;)Ljava/lang/String; = A(Com.Vivalnk.Sdk.Open.DataSet)
  b(Lcom/vivalnk/sdk/model/Person;Lcom/vivalnk/sdk/open/DataSet;[I)V = B(Com.Vivalnk.Sdk.Model.Person, Com.Vivalnk.Sdk.Open.DataSet, int[])
com/vivalnk/sdk/open/DataSet = Com.Vivalnk.Sdk.Open.DataSet
  <init>()V = .ctor()
  ecg = Ecg
  times = Times
  x = X
  y = Y
  z = Z
  isEmpty()Z = IsEmpty
com/vivalnk/sdk/open/IBPInterface = Com.Vivalnk.Sdk.Open.IBPInterface
  addData(Lcom/vivalnk/sdk/model/SampleData;)V = AddData(Com.Vivalnk.Sdk.Model.SampleData)
  initCalibrationData(IILjava/util/List;)V = InitCalibrationData(int, int, System.Collections.Generic.IList<Com.Vivalnk.Sdk.Model.SampleData>)
  initUserInfo(Lcom/vivalnk/sdk/model/Person;)V = InitUserInfo(Com.Vivalnk.Sdk.Model.Person)
  setListener(Lcom/vivalnk/sdk/open/BPManager$BPResultListener;)V = SetListener(Com.Vivalnk.Sdk.Open.BPManager.IBPResultListener)
com/vivalnk/sdk/open/RawData = Com.Vivalnk.Sdk.Open.RawData
  <init>(Lcom/vivalnk/sdk/model/SampleData;Lcom/vivalnk/sdk/model/Device;)V = .ctor(Com.Vivalnk.Sdk.Model.SampleData, Com.Vivalnk.Sdk.Model.Device)
  data = Data
  device = Device
com/vivalnk/sdk/open/SampleDataCache = Com.Vivalnk.Sdk.Open.SampleDataCache
  <init>()V = .ctor()
  a = A
  SIZE = Size
  getDataSet()Lcom/vivalnk/sdk/open/DataSet; = DataSet
  getListSize()I = ListSize
  getSampleDataList()Ljava/util/concurrent/CopyOnWriteArrayList; = SampleDataList
  addData([Lcom/vivalnk/sdk/model/SampleData;)V = AddData(params Com.Vivalnk.Sdk.Model.SampleData[])
  addDataList(Ljava/util/List;)V = AddDataList(System.Collections.Generic.IList<Com.Vivalnk.Sdk.Model.SampleData>)
  clear()V = Clear()
  clone()Lcom/vivalnk/sdk/open/SampleDataCache; = Clone()
com/vivalnk/sdk/open/SimpleData = Com.Vivalnk.Sdk.Open.SimpleData
  <init>(Lcom/vivalnk/sdk/model/SampleData;Lcom/vivalnk/sdk/model/Device;)V = .ctor(Com.Vivalnk.Sdk.Model.SampleData, Com.Vivalnk.Sdk.Model.Device)
  data = Data
  device = Device
com/vivalnk/sdk/report/DailyAnalysis = Com.Vivalnk.Sdk.Report.DailyAnalysis
  <init>()V = .ctor()
  doAnalysis(Ljava/util/List;Ljava/util/List;)Lcom/vivalnk/sdk/report/ReportModel; = DoAnalysis(System.Collections.Generic.IList<Com.Vivalnk.Sdk.Model.SampleData>, System.Collections.Generic.IList<Com.Vivalnk.Sdk.Model.Event>)
com/vivalnk/sdk/report/HRRangeModel = Com.Vivalnk.Sdk.Report.HRRangeModel
  <init>(II)V = .ctor(int, int)
  AFDuration = AFDuration
  AFEpisode = AFEpisode
  HRDuration = HRDuration
  HRPercentage = HRPercentage
  max = Max
  min = Min
com/vivalnk/sdk/report/ReportModel = Com.Vivalnk.Sdk.Report.ReportModel
  <init>()V = .ctor()
  AFBurden = AFBurden
  averageHR = AverageHR
  HRDuringLongestAFEpisode = HRDuringLongestAFEpisode
  HRRangeModels = HRRangeModels
  longestAFDuration = LongestAFDuration
  longestPauseDuration = LongestPauseDuration
  recordingDuration = RecordingDuration
  recordingEndTime = RecordingEndTime
  recordingStartTime = RecordingStartTime
  totalAF = TotalAF
  totalPause = TotalPause
  getHRRangeIndex(D)I = GetHRRangeIndex(double)
com/vivalnk/sdk/repository/device/UploaderStrategy = Com.Vivalnk.Sdk.Repository.Device.UploaderStrategy
  <init>()V = .ctor()
  save = Save
  upload = Upload
  setSave(Z)Lcom/vivalnk/sdk/repository/device/UploaderStrategy; = SetSave(bool)
  setUpload(Z)Lcom/vivalnk/sdk/repository/device/UploaderStrategy; = SetUpload(bool)
com/vivalnk/sdk/repository/local/database/convert/BaseDeviceModelConverter = Com.Vivalnk.Sdk.Repository.Local.Database.Convert.BaseDeviceModelConverter
  <init>()V = .ctor()
  convertToDatabaseValue(Lcom/vivalnk/sdk/model/DeviceModel;)Ljava/lang/Integer; = ConvertToDatabaseValue(Com.Vivalnk.Sdk.Model.DeviceModel)
  convertToEntityProperty(Ljava/lang/Integer;)Lcom/vivalnk/sdk/model/DeviceModel; = ConvertToEntityProperty(Java.Lang.Integer)
com/vivalnk/sdk/repository/local/database/convert/BaseMapConverter = Com.Vivalnk.Sdk.Repository.Local.Database.Convert.BaseMapConverter
  <init>()V = .ctor()
  mapType = MapType
  convertToDatabaseValue(Ljava/util/Map;)Ljava/lang/String; = ConvertToDatabaseValue(System.Collections.Generic.IDictionary<string, Java.Lang.Object>)
  convertToEntityProperty(Ljava/lang/String;)Ljava/util/Map; = ConvertToEntityProperty(string)
com/vivalnk/sdk/repository/local/database/DatabaseManager = Com.Vivalnk.Sdk.Repository.Local.Database.DatabaseManager
  <init>()V = .ctor()
  FLAG_USE_OBJECTBOX = FlagUseObjectbox
  FLAG_USE_ROOM = FlagUseRoom
  mIDataDAO = MIDataDAO
  mIDeviceDAO = MIDeviceDAO
  getDataDAO()Lcom/vivalnk/sdk/repository/local/database/IDataDAO; = DataDAO
  getDeviceDAO()Lcom/vivalnk/sdk/repository/local/database/IDeviceDAO; = DeviceDAO
  getInstance()Lcom/vivalnk/sdk/repository/local/database/DatabaseManager; = Instance
  init(Landroid/content/Context;Ljava/lang/String;)V = Init(Android.Content.Context, string)
  init(Lcom/vivalnk/sdk/repository/local/database/IDeviceDAO;Lcom/vivalnk/sdk/repository/local/database/IDataDAO;)V = Init(Com.Vivalnk.Sdk.Repository.Local.Database.IDeviceDAO, Com.Vivalnk.Sdk.Repository.Local.Database.IDataDAO)
com/vivalnk/sdk/repository/local/database/IDataDAO = Com.Vivalnk.Sdk.Repository.Local.Database.IDataDAO
  delete([Lcom/vivalnk/sdk/repository/local/database/VitalData;)V = Delete(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalData[])
  deleteAll()V = DeleteAll()
  insert([Lcom/vivalnk/sdk/repository/local/database/VitalData;)V = Insert(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalData[])
  query(Ljava/lang/String;J)Lcom/vivalnk/sdk/repository/local/database/VitalData; = Query(string, long)
  query(Ljava/lang/String;JJ)Ljava/util/List; = Query(string, long, long)
  queryAll()Ljava/util/List; = QueryAll()
  update([Lcom/vivalnk/sdk/repository/local/database/VitalData;)V = Update(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalData[])
com/vivalnk/sdk/repository/local/database/IDBManager = Com.Vivalnk.Sdk.Repository.Local.Database.IDBManager
com/vivalnk/sdk/repository/local/database/IDeviceDAO = Com.Vivalnk.Sdk.Repository.Local.Database.IDeviceDAO
  delete([Lcom/vivalnk/sdk/repository/local/database/VitalDevice;)V = Delete(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalDevice[])
  delete([Ljava/lang/String;)V = Delete(params string[])
  deleteAll()V = DeleteAll()
  insert([Lcom/vivalnk/sdk/repository/local/database/VitalDevice;)V = Insert(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalDevice[])
  query([Ljava/lang/String;)Ljava/util/List; = Query(params string[])
  queryAll()Ljava/util/List; = QueryAll()
  update([Lcom/vivalnk/sdk/repository/local/database/VitalDevice;)V = Update(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalDevice[])
com/vivalnk/sdk/repository/local/database/objectbox/DatabaseManager_Objectbox = Com.Vivalnk.Sdk.Repository.Local.Database.Objectbox.DatabaseManager_Objectbox
  <init>()V = .ctor()
  dataDir = DataDir
  dataDirFile = DataDirFile
  mContext = MContext
  mWorkHandler = MWorkHandler
  TAG = Tag
  time = Time
  getInstance()Lcom/vivalnk/sdk/repository/local/database/objectbox/DatabaseManager_Objectbox; = Instance
  handleMessage(Landroid/os/Message;)Z = HandleMessage(Android.OS.Message)
  init(Landroid/content/Context;)V = Init(Android.Content.Context)
com/vivalnk/sdk/repository/local/database/objectbox/MyObjectBox = Com.Vivalnk.Sdk.Repository.Local.Database.Objectbox.MyObjectBox
  <init>()V = .ctor()
  getModel()[B = GetModel()
com/vivalnk/sdk/repository/local/database/objectbox/VitalData_Objectbox = Com.Vivalnk.Sdk.Repository.Local.Database.Objectbox.VitalData_Objectbox
  <init>()V = .ctor()
  <init>(Lcom/vivalnk/sdk/data/DataJsonConverter$DataFormated;)V = .ctor(Com.Vivalnk.Sdk.Data.DataJsonConverter.DataFormated)
  <init>(Lcom/vivalnk/sdk/model/common/IVitalData;)V = .ctor(Com.Vivalnk.Sdk.Model.Common.IVitalData)
  deviceID = DeviceID
  deviceModel = DeviceModel
  deviceName = DeviceName
  deviceSN = DeviceSN
  extras = Extras
  id = Id
  time = Time
  unique_key = UniqueKey
  getDeviceID()Ljava/lang/String; = DeviceID
  setDeviceID(Ljava/lang/String;)V = DeviceID
  getDeviceModel()Lcom/vivalnk/sdk/model/DeviceModel; = DeviceModel
  setDeviceModel(Lcom/vivalnk/sdk/model/DeviceModel;)V = DeviceModel
  getDeviceName()Ljava/lang/String; = DeviceName
  setDeviceName(Ljava/lang/String;)V = DeviceName
  getDeviceSN()Ljava/lang/String; = DeviceSN
  setDeviceSN(Ljava/lang/String;)V = DeviceSN
  getExtras()Ljava/util/Map; = Extras
  setExtras(Ljava/util/Map;)V = Extras
  getId()J = Id
  setId(J)V = Id
  getTime()Ljava/lang/Long; = Time
  setTime(Ljava/lang/Long;)V = Time
  clone()Lcom/vivalnk/sdk/repository/local/database/objectbox/VitalData_Objectbox; = Clone()
  toFileString()Ljava/lang/String; = ToFileString()
com/vivalnk/sdk/repository/local/database/objectbox/VitalDataDAO_Objectbox = Com.Vivalnk.Sdk.Repository.Local.Database.Objectbox.VitalDataDAO_Objectbox
  delete([Lcom/vivalnk/sdk/repository/local/database/VitalData;)V = Delete(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalData[])
  deleteAll()V = DeleteAll()
  insert([Lcom/vivalnk/sdk/repository/local/database/VitalData;)V = Insert(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalData[])
  query(Ljava/lang/String;J)Lcom/vivalnk/sdk/repository/local/database/VitalData; = Query(string, long)
  query(Ljava/lang/String;JJ)Ljava/util/List; = Query(string, long, long)
  queryAll()Ljava/util/List; = QueryAll()
  queryAll(Ljava/lang/String;)Ljava/util/List; = QueryAll(string)
  update([Lcom/vivalnk/sdk/repository/local/database/VitalData;)V = Update(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalData[])
com/vivalnk/sdk/repository/local/database/objectbox/VitalDevice_Objectbox = Com.Vivalnk.Sdk.Repository.Local.Database.Objectbox.VitalDevice_Objectbox
  <init>()V = .ctor()
  <init>(Lcom/vivalnk/sdk/model/common/IVitalDevice;)V = .ctor(Com.Vivalnk.Sdk.Model.Common.IVitalDevice)
  deviceID = DeviceID
  deviceInfo = DeviceInfo
  deviceModel = DeviceModel
  deviceName = DeviceName
  deviceSN = DeviceSN
  fwVersion = FwVersion
  hwVersion = HwVersion
  id = Id
  getDeviceID()Ljava/lang/String; = DeviceID
  setDeviceID(Ljava/lang/String;)V = DeviceID
  getDeviceInfo()Ljava/lang/String; = DeviceInfo
  setDeviceInfo(Ljava/lang/String;)V = DeviceInfo
  getDeviceModel()Lcom/vivalnk/sdk/model/DeviceModel; = DeviceModel
  setDeviceModel(Lcom/vivalnk/sdk/model/DeviceModel;)V = DeviceModel
  getDeviceName()Ljava/lang/String; = DeviceName
  setDeviceName(Ljava/lang/String;)V = DeviceName
  getDeviceSN()Ljava/lang/String; = DeviceSN
  setDeviceSN(Ljava/lang/String;)V = DeviceSN
  getFwVersion()Ljava/lang/String; = FwVersion
  setFwVersion(Ljava/lang/String;)V = FwVersion
  getHwVersion()Ljava/lang/String; = HwVersion
  setHwVersion(Ljava/lang/String;)V = HwVersion
  getId()J = Id
  setId(J)V = Id
com/vivalnk/sdk/repository/local/database/objectbox/VitalDeviceDAO_Objectbox = Com.Vivalnk.Sdk.Repository.Local.Database.Objectbox.VitalDeviceDAO_Objectbox
  delete([Lcom/vivalnk/sdk/repository/local/database/VitalDevice;)V = Delete(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalDevice[])
  delete([Ljava/lang/String;)V = Delete(params string[])
  deleteAll()V = DeleteAll()
  insert([Lcom/vivalnk/sdk/repository/local/database/VitalDevice;)V = Insert(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalDevice[])
  query([Ljava/lang/String;)Ljava/util/List; = Query(params string[])
  queryAll()Ljava/util/List; = QueryAll()
  update([Lcom/vivalnk/sdk/repository/local/database/VitalDevice;)V = Update(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalDevice[])
com/vivalnk/sdk/repository/local/database/room/DatabaseManager_Room = Com.Vivalnk.Sdk.Repository.Local.Database.Room.DatabaseManager_Room
  <init>()V = .ctor()
  mContext = MContext
  mWorkHandler = MWorkHandler
  TAG = Tag
  time = Time
  getInstance()Lcom/vivalnk/sdk/repository/local/database/room/DatabaseManager_Room; = Instance
  getVitalDataDAO()Lcom/vivalnk/sdk/repository/local/database/room/IRoomDataDAO; = VitalDataDAO
  getVitalDeviceDAO()Lcom/vivalnk/sdk/repository/local/database/room/IRoomDeviceDAO; = VitalDeviceDAO
  handleMessage(Landroid/os/Message;)Z = HandleMessage(Android.OS.Message)
  init(Landroid/content/Context;)V = Init(Android.Content.Context)
com/vivalnk/sdk/repository/local/database/room/DeviceModelConverter = Com.Vivalnk.Sdk.Repository.Local.Database.Room.DeviceModelConverter
  <init>()V = .ctor()
com/vivalnk/sdk/repository/local/database/room/IRoomDataDAO = Com.Vivalnk.Sdk.Repository.Local.Database.Room.IRoomDataDAO
  getCount()J = Count
  delete([Lcom/vivalnk/sdk/repository/local/database/room/VitalData_Room;)V = Delete(params Com.Vivalnk.Sdk.Repository.Local.Database.Room.VitalData_Room[])
  deleteAll()V = DeleteAll()
  getCount(Ljava/lang/String;)J = GetCount(string)
  insert([Lcom/vivalnk/sdk/repository/local/database/room/VitalData_Room;)V = Insert(params Com.Vivalnk.Sdk.Repository.Local.Database.Room.VitalData_Room[])
  query(Ljava/lang/String;J)Lcom/vivalnk/sdk/repository/local/database/room/VitalData_Room; = Query(string, long)
  query(Ljava/lang/String;JJ)Ljava/util/List; = Query(string, long, long)
  queryAll()Ljava/util/List; = QueryAll()
  queryAll(Ljava/lang/String;)Ljava/util/List; = QueryAll(string)
  queryLatestAll(J)Ljava/util/List; = QueryLatestAll(long)
  queryOldestAll(J)Ljava/util/List; = QueryOldestAll(long)
  update([Lcom/vivalnk/sdk/repository/local/database/room/VitalData_Room;)V = Update(params Com.Vivalnk.Sdk.Repository.Local.Database.Room.VitalData_Room[])
com/vivalnk/sdk/repository/local/database/room/IRoomDataDAO_Impl = Com.Vivalnk.Sdk.Repository.Local.Database.Room.IRoomDataDAO_Impl
  __deviceModelConverter = DeviceModelConverter
  __mapConverter = MapConverter
  getCount()J = Count
  delete([Lcom/vivalnk/sdk/repository/local/database/room/VitalData_Room;)V = Delete(params Com.Vivalnk.Sdk.Repository.Local.Database.Room.VitalData_Room[])
  deleteAll()V = DeleteAll()
  getCount(Ljava/lang/String;)J = GetCount(string)
  insert([Lcom/vivalnk/sdk/repository/local/database/room/VitalData_Room;)V = Insert(params Com.Vivalnk.Sdk.Repository.Local.Database.Room.VitalData_Room[])
  query(Ljava/lang/String;J)Lcom/vivalnk/sdk/repository/local/database/room/VitalData_Room; = Query(string, long)
  query(Ljava/lang/String;JJ)Ljava/util/List; = Query(string, long, long)
  queryAll()Ljava/util/List; = QueryAll()
  queryAll(Ljava/lang/String;)Ljava/util/List; = QueryAll(string)
  queryLatestAll(J)Ljava/util/List; = QueryLatestAll(long)
  queryOldestAll(J)Ljava/util/List; = QueryOldestAll(long)
  update([Lcom/vivalnk/sdk/repository/local/database/room/VitalData_Room;)V = Update(params Com.Vivalnk.Sdk.Repository.Local.Database.Room.VitalData_Room[])
com/vivalnk/sdk/repository/local/database/room/IRoomDeviceDAO = Com.Vivalnk.Sdk.Repository.Local.Database.Room.IRoomDeviceDAO
  delete([Lcom/vivalnk/sdk/repository/local/database/room/VitalDevice_Room;)V = Delete(params Com.Vivalnk.Sdk.Repository.Local.Database.Room.VitalDevice_Room[])
  deleteAll()V = DeleteAll()
  insert([Lcom/vivalnk/sdk/repository/local/database/room/VitalDevice_Room;)V = Insert(params Com.Vivalnk.Sdk.Repository.Local.Database.Room.VitalDevice_Room[])
  query(Ljava/lang/String;)Lcom/vivalnk/sdk/repository/local/database/room/VitalDevice_Room; = Query(string)
  queryAll()Ljava/util/List; = QueryAll()
  update([Lcom/vivalnk/sdk/repository/local/database/room/VitalDevice_Room;)V = Update(params Com.Vivalnk.Sdk.Repository.Local.Database.Room.VitalDevice_Room[])
com/vivalnk/sdk/repository/local/database/room/IRoomDeviceDAO_Impl = Com.Vivalnk.Sdk.Repository.Local.Database.Room.IRoomDeviceDAO_Impl
  __deviceModelConverter = DeviceModelConverter
  delete([Lcom/vivalnk/sdk/repository/local/database/room/VitalDevice_Room;)V = Delete(params Com.Vivalnk.Sdk.Repository.Local.Database.Room.VitalDevice_Room[])
  deleteAll()V = DeleteAll()
  insert([Lcom/vivalnk/sdk/repository/local/database/room/VitalDevice_Room;)V = Insert(params Com.Vivalnk.Sdk.Repository.Local.Database.Room.VitalDevice_Room[])
  query(Ljava/lang/String;)Lcom/vivalnk/sdk/repository/local/database/room/VitalDevice_Room; = Query(string)
  queryAll()Ljava/util/List; = QueryAll()
  update([Lcom/vivalnk/sdk/repository/local/database/room/VitalDevice_Room;)V = Update(params Com.Vivalnk.Sdk.Repository.Local.Database.Room.VitalDevice_Room[])
com/vivalnk/sdk/repository/local/database/room/MapConverter = Com.Vivalnk.Sdk.Repository.Local.Database.Room.MapConverter
  <init>()V = .ctor()
com/vivalnk/sdk/repository/local/database/room/VitalData_Room = Com.Vivalnk.Sdk.Repository.Local.Database.Room.VitalData_Room
  <init>()V = .ctor()
  <init>(Lcom/vivalnk/sdk/data/DataJsonConverter$DataFormated;)V = .ctor(Com.Vivalnk.Sdk.Data.DataJsonConverter.DataFormated)
  <init>(Lcom/vivalnk/sdk/model/common/IVitalData;)V = .ctor(Com.Vivalnk.Sdk.Model.Common.IVitalData)
  deviceID = DeviceID
  deviceModel = DeviceModel
  deviceName = DeviceName
  deviceSN = DeviceSN
  extras = Extras
  id = Id
  time = Time
  getDeviceID()Ljava/lang/String; = DeviceID
  setDeviceID(Ljava/lang/String;)V = DeviceID
  getDeviceModel()Lcom/vivalnk/sdk/model/DeviceModel; = DeviceModel
  setDeviceModel(Lcom/vivalnk/sdk/model/DeviceModel;)V = DeviceModel
  getDeviceName()Ljava/lang/String; = DeviceName
  setDeviceName(Ljava/lang/String;)V = DeviceName
  getDeviceSN()Ljava/lang/String; = DeviceSN
  setDeviceSN(Ljava/lang/String;)V = DeviceSN
  getExtras()Ljava/util/Map; = Extras
  setExtras(Ljava/util/Map;)V = Extras
  getId()J = Id
  setId(J)V = Id
  getTime()Ljava/lang/Long; = Time
  setTime(Ljava/lang/Long;)V = Time
  clone()Lcom/vivalnk/sdk/repository/local/database/room/VitalData_Room; = Clone()
com/vivalnk/sdk/repository/local/database/room/VitalDataDAO_Room = Com.Vivalnk.Sdk.Repository.Local.Database.Room.VitalDataDAO_Room
  dao = Dao
  getCount()J = Count
  delete([Lcom/vivalnk/sdk/repository/local/database/VitalData;)V = Delete(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalData[])
  deleteAll()V = DeleteAll()
  getCount(Ljava/lang/String;)J = GetCount(string)
  insert([Lcom/vivalnk/sdk/repository/local/database/VitalData;)V = Insert(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalData[])
  query(Ljava/lang/String;J)Lcom/vivalnk/sdk/repository/local/database/VitalData; = Query(string, long)
  query(Ljava/lang/String;JJ)Ljava/util/List; = Query(string, long, long)
  queryAll()Ljava/util/List; = QueryAll()
  queryAll(Ljava/lang/String;)Ljava/util/List; = QueryAll(string)
  queryLatestAll(J)Ljava/util/List; = QueryLatestAll(long)
  queryOldestAll(J)Ljava/util/List; = QueryOldestAll(long)
  update([Lcom/vivalnk/sdk/repository/local/database/VitalData;)V = Update(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalData[])
com/vivalnk/sdk/repository/local/database/room/VitalDevice_Room = Com.Vivalnk.Sdk.Repository.Local.Database.Room.VitalDevice_Room
  <init>()V = .ctor()
  <init>(Lcom/vivalnk/sdk/model/common/IVitalDevice;)V = .ctor(Com.Vivalnk.Sdk.Model.Common.IVitalDevice)
  deviceID = DeviceID
  deviceInfo = DeviceInfo
  deviceModel = DeviceModel
  deviceName = DeviceName
  deviceSN = DeviceSN
  fwVersion = FwVersion
  hwVersion = HwVersion
  id = Id
  getDeviceID()Ljava/lang/String; = DeviceID
  setDeviceID(Ljava/lang/String;)V = DeviceID
  getDeviceInfo()Ljava/lang/String; = DeviceInfo
  setDeviceInfo(Ljava/lang/String;)V = DeviceInfo
  getDeviceModel()Lcom/vivalnk/sdk/model/DeviceModel; = DeviceModel
  setDeviceModel(Lcom/vivalnk/sdk/model/DeviceModel;)V = DeviceModel
  getDeviceName()Ljava/lang/String; = DeviceName
  setDeviceName(Ljava/lang/String;)V = DeviceName
  getDeviceSN()Ljava/lang/String; = DeviceSN
  setDeviceSN(Ljava/lang/String;)V = DeviceSN
  getFwVersion()Ljava/lang/String; = FwVersion
  setFwVersion(Ljava/lang/String;)V = FwVersion
  getHwVersion()Ljava/lang/String; = HwVersion
  setHwVersion(Ljava/lang/String;)V = HwVersion
  getId()J = Id
  setId(J)V = Id
com/vivalnk/sdk/repository/local/database/room/VitalDeviceDAO_Room = Com.Vivalnk.Sdk.Repository.Local.Database.Room.VitalDeviceDAO_Room
  dao = Dao
  delete([Lcom/vivalnk/sdk/repository/local/database/VitalDevice;)V = Delete(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalDevice[])
  delete([Ljava/lang/String;)V = Delete(params string[])
  deleteAll()V = DeleteAll()
  insert([Lcom/vivalnk/sdk/repository/local/database/VitalDevice;)V = Insert(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalDevice[])
  query([Ljava/lang/String;)Ljava/util/List; = Query(params string[])
  queryAll()Ljava/util/List; = QueryAll()
  update([Lcom/vivalnk/sdk/repository/local/database/VitalDevice;)V = Update(params Com.Vivalnk.Sdk.Repository.Local.Database.VitalDevice[])
com/vivalnk/sdk/repository/local/database/VitalData = Com.Vivalnk.Sdk.Repository.Local.Database.VitalData
  <init>()V = .ctor()
  <init>(Lcom/vivalnk/sdk/data/DataJsonConverter$DataFormated;)V = .ctor(Com.Vivalnk.Sdk.Data.DataJsonConverter.DataFormated)
  <init>(Lcom/vivalnk/sdk/model/common/IVitalData;)V = .ctor(Com.Vivalnk.Sdk.Model.Common.IVitalData)
com/vivalnk/sdk/repository/local/database/VitalDevice = Com.Vivalnk.Sdk.Repository.Local.Database.VitalDevice
  <init>()V = .ctor()
  <init>(Lcom/vivalnk/sdk/model/common/IVitalDevice;)V = .ctor(Com.Vivalnk.Sdk.Model.Common.IVitalDevice)
  <init>(Lcom/vivalnk/sdk/model/Device;)V = .ctor(Com.Vivalnk.Sdk.Model.Device)
  deviceID = DeviceID
  deviceInfo = DeviceInfo
  deviceModel = DeviceModel
  deviceName = DeviceName
  deviceSN = DeviceSN
  fwVersion = FwVersion
  hwVersion = HwVersion
  id = Id
  getDeviceID()Ljava/lang/String; = DeviceID
  setDeviceID(Ljava/lang/String;)V = DeviceID
  getDeviceInfo()Ljava/lang/String; = DeviceInfo
  setDeviceInfo(Ljava/lang/String;)V = DeviceInfo
  getDeviceModel()Lcom/vivalnk/sdk/model/DeviceModel; = DeviceModel
  setDeviceModel(Lcom/vivalnk/sdk/model/DeviceModel;)V = DeviceModel
  getDeviceName()Ljava/lang/String; = DeviceName
  setDeviceName(Ljava/lang/String;)V = DeviceName
  getDeviceSN()Ljava/lang/String; = DeviceSN
  setDeviceSN(Ljava/lang/String;)V = DeviceSN
  getFwVersion()Ljava/lang/String; = FwVersion
  setFwVersion(Ljava/lang/String;)V = FwVersion
  getHwVersion()Ljava/lang/String; = HwVersion
  setHwVersion(Ljava/lang/String;)V = HwVersion
  getId()J = Id
  setId(J)V = Id
  setDeviceInfo(Ljava/util/Map;)V = SetDeviceInfo(System.Collections.Generic.IDictionary<string, Java.Lang.Object>)
com/vivalnk/sdk/repository/model/event/EcgDeviceStatus = Com.Vivalnk.Sdk.Repository.Model.Event.EcgDeviceStatus
  <init>()V = .ctor()
com/vivalnk/sdk/repository/model/event/EcgProcessed = Com.Vivalnk.Sdk.Repository.Model.Event.EcgProcessed
  <init>()V = .ctor()
com/vivalnk/sdk/repository/model/event/EcgRaw = Com.Vivalnk.Sdk.Repository.Model.Event.EcgRaw
  <init>()V = .ctor()
com/vivalnk/sdk/repository/model/event/TemperatureDeviceStatus = Com.Vivalnk.Sdk.Repository.Model.Event.TemperatureDeviceStatus
  <init>()V = .ctor()
com/vivalnk/sdk/repository/model/event/TemperatureProcessed = Com.Vivalnk.Sdk.Repository.Model.Event.TemperatureProcessed
  <init>()V = .ctor()
com/vivalnk/sdk/repository/model/event/TemperatureRaw = Com.Vivalnk.Sdk.Repository.Model.Event.TemperatureRaw
  <init>()V = .ctor()
com/vivalnk/sdk/repository/model/event/WellnessDailyStats = Com.Vivalnk.Sdk.Repository.Model.Event.WellnessDailyStats
  <init>()V = .ctor()
  activeCalories = ActiveCalories
  activeMinutes = ActiveMinutes
  averageHeartRate = AverageHeartRate
  averageRespirationRate = AverageRespirationRate
  dailyRecover = DailyRecover
  dailyStress = DailyStress
  highestCalories = HighestCalories
  highestHeartRate = HighestHeartRate
  highestRecover = HighestRecover
  highestRespirationRate = HighestRespirationRate
  highestStress = HighestStress
  lowestCalories = LowestCalories
  lowestHeartRate = LowestHeartRate
  lowestRecover = LowestRecover
  lowestRespirationRate = LowestRespirationRate
  lowestStress = LowestStress
  recoverMinutes = RecoverMinutes
  sleepDuration = SleepDuration
  sleepRecover = SleepRecover
  stressMinutes = StressMinutes
  getActiveCalories()D = ActiveCalories
  setActiveCalories(D)V = ActiveCalories
  getActiveMinutes()I = ActiveMinutes
  setActiveMinutes(I)V = ActiveMinutes
  getAverageHeartRate()I = AverageHeartRate
  setAverageHeartRate(I)V = AverageHeartRate
  getAverageRespirationRate()I = AverageRespirationRate
  setAverageRespirationRate(I)V = AverageRespirationRate
  getDailyRecover()D = DailyRecover
  setDailyRecover(D)V = DailyRecover
  getDailyStress()D = DailyStress
  setDailyStress(D)V = DailyStress
  getHighestCalories()D = HighestCalories
  setHighestCalories(D)V = HighestCalories
  getHighestHeartRate()I = HighestHeartRate
  setHighestHeartRate(I)V = HighestHeartRate
  getHighestRecover()D = HighestRecover
  setHighestRecover(D)V = HighestRecover
  getHighestRespirationRate()I = HighestRespirationRate
  setHighestRespirationRate(I)V = HighestRespirationRate
  getHighestStress()D = HighestStress
  setHighestStress(D)V = HighestStress
  getLowestCalories()D = LowestCalories
  setLowestCalories(D)V = LowestCalories
  getLowestHeartRate()I = LowestHeartRate
  setLowestHeartRate(I)V = LowestHeartRate
  getLowestRecover()D = LowestRecover
  setLowestRecover(D)V = LowestRecover
  getLowestRespirationRate()I = LowestRespirationRate
  setLowestRespirationRate(I)V = LowestRespirationRate
  getLowestStress()D = LowestStress
  setLowestStress(D)V = LowestStress
  getRecoverMinutes()I = RecoverMinutes
  setRecoverMinutes(I)V = RecoverMinutes
  getSleepDuration()D = SleepDuration
  setSleepDuration(D)V = SleepDuration
  getSleepRecover()D = SleepRecover
  setSleepRecover(D)V = SleepRecover
  getStressMinutes()I = StressMinutes
  setStressMinutes(I)V = StressMinutes
com/vivalnk/sdk/repository/model/event/WellnessDeviceStatus = Com.Vivalnk.Sdk.Repository.Model.Event.WellnessDeviceStatus
  <init>()V = .ctor()
com/vivalnk/sdk/repository/model/event/WellnessProcessed = Com.Vivalnk.Sdk.Repository.Model.Event.WellnessProcessed
  <init>()V = .ctor()
  activityScore = ActivityScore
  artifactPercent = ArtifactPercent
  correctedHr = CorrectedHr
  currentState = CurrentState
  energyExpenditure = EnergyExpenditure
  energyExpenditureCumulative = EnergyExpenditureCumulative
  epoc = Epoc
  maximalHr = MaximalHr
  maximalMET = MaximalMET
  maximalMETminutes = MaximalMETminutes
  maximalMETpercentage = MaximalMETpercentage
  maxSleepQualityIndex = MaxSleepQualityIndex
  meanMAD = MeanMAD
  minimalHr = MinimalHr
  relaxStressIntensity = RelaxStressIntensity
  respirationRate = RespirationRate
  sleepEnd = SleepEnd
  sleepEndCandidate = SleepEndCandidate
  sleepQualityIndex = SleepQualityIndex
  sleepStart = SleepStart
  stressBalance = StressBalance
  trainingEffect = TrainingEffect
  trainingLoadPeak = TrainingLoadPeak
  getActivityScore()I = ActivityScore
  setActivityScore(I)V = ActivityScore
  getArtifactPercent()I = ArtifactPercent
  setArtifactPercent(I)V = ArtifactPercent
  getCorrectedHr()I = CorrectedHr
  setCorrectedHr(I)V = CorrectedHr
  getCurrentState()I = CurrentState
  setCurrentState(I)V = CurrentState
  getEnergyExpenditure()I = EnergyExpenditure
  setEnergyExpenditure(I)V = EnergyExpenditure
  getEnergyExpenditureCumulative()I = EnergyExpenditureCumulative
  setEnergyExpenditureCumulative(I)V = EnergyExpenditureCumulative
  getEpoc()I = Epoc
  setEpoc(I)V = Epoc
  getMaximalHr()I = MaximalHr
  setMaximalHr(I)V = MaximalHr
  getMaximalMET()D = MaximalMET
  setMaximalMET(D)V = MaximalMET
  getMaximalMETminutes()I = MaximalMETminutes
  setMaximalMETminutes(I)V = MaximalMETminutes
  getMaximalMETpercentage()I = MaximalMETpercentage
  setMaximalMETpercentage(I)V = MaximalMETpercentage
  getMaxSleepQualityIndex()I = MaxSleepQualityIndex
  setMaxSleepQualityIndex(I)V = MaxSleepQualityIndex
  getMeanMAD()I = MeanMAD
  setMeanMAD(I)V = MeanMAD
  getMinimalHr()I = MinimalHr
  setMinimalHr(I)V = MinimalHr
  getRelaxStressIntensity()I = RelaxStressIntensity
  setRelaxStressIntensity(I)V = RelaxStressIntensity
  getRespirationRate()I = RespirationRate
  setRespirationRate(I)V = RespirationRate
  isSleepEnd()Z = SleepEnd
  setSleepEnd(Z)V = SleepEnd
  isSleepEndCandidate()Z = SleepEndCandidate
  setSleepEndCandidate(Z)V = SleepEndCandidate
  getSleepQualityIndex()I = SleepQualityIndex
  setSleepQualityIndex(I)V = SleepQualityIndex
  isSleepStart()Z = SleepStart
  setSleepStart(Z)V = SleepStart
  getStressBalance()I = StressBalance
  setStressBalance(I)V = StressBalance
  getTrainingEffect()I = TrainingEffect
  setTrainingEffect(I)V = TrainingEffect
  getTrainingLoadPeak()I = TrainingLoadPeak
  setTrainingLoadPeak(I)V = TrainingLoadPeak
com/vivalnk/sdk/repository/model/event/WellnessRaw = Com.Vivalnk.Sdk.Repository.Model.Event.WellnessRaw
  <init>()V = .ctor()
com/vivalnk/sdk/repository/model/Event = Com.Vivalnk.Sdk.Repository.Model.Event
  <init>()V = .ctor()
com/vivalnk/sdk/repository/model/EventData = Com.Vivalnk.Sdk.Repository.Model.EventData
  <init>(Lcom/vivalnk/sdk/repository/local/database/VitalData;)V = .ctor(Com.Vivalnk.Sdk.Repository.Local.Database.VitalData)
  app_id = AppId
  auditTrail = AuditTrail
  carrier = Carrier
  category = Category
  collectTime = CollectTime
  context = Context
  customData = CustomData
  data = Data
  deviceBattery = DeviceBattery
  deviceIp = DeviceIp
  deviceOsType = DeviceOsType
  deviceOsVersion = DeviceOsVersion
  deviceToken = DeviceToken
  deviceType = DeviceType
  language = Language
  latitude = Latitude
  longtitude = Longtitude
  name = Name
  networkType = NetworkType
  patchMessage = PatchMessage
  profileId = ProfileId
  receiveTime = ReceiveTime
  recordTime = RecordTime
  sdkVersion = SdkVersion
  sensorId = SensorId
  tags = Tags
  timezone = Timezone
  type = Type
  getAppID()Ljava/lang/String; = AppID
  getAuditTrail()Ljava/util/List; = AuditTrail
  setAuditTrail(Ljava/util/List;)V = AuditTrail
  getCarrier()Ljava/lang/String; = Carrier
  setCarrier(Ljava/lang/String;)V = Carrier
  getCategory()Ljava/lang/String; = Category
  setCategory(Ljava/lang/String;)V = Category
  getCollectTime()Ljava/lang/Long; = CollectTime
  setCollectTime(Ljava/lang/Long;)V = CollectTime
  getContext()Ljava/util/Map; = Context
  setContext(Ljava/util/Map;)V = Context
  getCustomData()Ljava/util/Map; = CustomData
  setCustomData(Ljava/util/Map;)V = CustomData
  getData()Lcom/vivalnk/sdk/data/DataJsonConverter$DataFormatedNet; = Data
  setData(Lcom/vivalnk/sdk/data/DataJsonConverter$DataFormatedNet;)V = Data
  getDeviceBattery()D = DeviceBattery
  getDeviceIp()Ljava/lang/String; = DeviceIp
  setDeviceIp(Ljava/lang/String;)V = DeviceIp
  getDeviceOsType()Ljava/lang/String; = DeviceOsType
  setDeviceOsType(Ljava/lang/String;)V = DeviceOsType
  getDeviceOsVersion()Ljava/lang/String; = DeviceOsVersion
  setDeviceOsVersion(Ljava/lang/String;)V = DeviceOsVersion
  getDeviceToken()Ljava/lang/String; = DeviceToken
  setDeviceToken(Ljava/lang/String;)V = DeviceToken
  getDeviceType()Ljava/lang/String; = DeviceType
  setDeviceType(Ljava/lang/String;)V = DeviceType
  getLanguage()Ljava/lang/String; = Language
  setLanguage(Ljava/lang/String;)V = Language
  getLatitude()D = Latitude
  setLatitude(D)V = Latitude
  getLongtitude()D = Longtitude
  setLongtitude(D)V = Longtitude
  getName()Ljava/lang/String; = Name
  setName(Ljava/lang/String;)V = Name
  getProfileIdX()Ljava/lang/String; = ProfileIdX
  setProfileIdX(Ljava/lang/String;)V = ProfileIdX
  getReceiveTime()Ljava/lang/Long; = ReceiveTime
  setReceiveTime(Ljava/lang/Long;)V = ReceiveTime
  getRecordTime()Ljava/lang/Long; = RecordTime
  setRecordTime(Ljava/lang/Long;)V = RecordTime
  getSdkVersion()Ljava/lang/String; = SdkVersion
  setSdkVersion(Ljava/lang/String;)V = SdkVersion
  getSensorId()Ljava/lang/String; = SensorId
  setSensorId(Ljava/lang/String;)V = SensorId
  getTags()Ljava/util/List; = Tags
  setTags(Ljava/util/List;)V = Tags
  getTimezone()Ljava/lang/String; = Timezone
  setTimezone(Ljava/lang/String;)V = Timezone
  getType()Ljava/lang/String; = Type
  setType(Ljava/lang/String;)V = Type
  getDeviceInfoInMap(Lcom/vivalnk/sdk/repository/local/database/VitalData;)Ljava/lang/String; = GetDeviceInfoInMap(Com.Vivalnk.Sdk.Repository.Local.Database.VitalData)
  setDeviceBattery(Ljava/lang/Integer;)V = SetDeviceBattery(Java.Lang.Integer)
  setgetAppID(Ljava/lang/String;)V = SetgetAppID(string)
com/vivalnk/sdk/repository/model/EventType = Com.Vivalnk.Sdk.Repository.Model.IEventType
  EcgDeviceStatus = EcgDeviceStatus
  EcgProcessed = EcgProcessed
  EcgRaw = EcgRaw
  TemperatureDeviceStatus = TemperatureDeviceStatus
  TemperatureProcessed = TemperatureProcessed
  TemperatureRaw = TemperatureRaw
  WellnessDailyStats = WellnessDailyStats
  WellnessDeviceStatus = WellnessDeviceStatus
  WellnessProcessed = WellnessProcessed
  WellnessRaw = WellnessRaw
com/vivalnk/sdk/SampleDataReceiveListener = Com.Vivalnk.Sdk.ISampleDataReceiveListener
com/vivalnk/sdk/utils/ACache = Com.Vivalnk.Sdk.Utils.ACache
  <init>(Ljava/io/File;JI)V = .ctor(Java.IO.File, long, int)
  MAX_COUNT = MaxCount
  MAX_SIZE = MaxSize
  mCache = MCache
  mInstanceMap = MInstanceMap
  TIME_DAY = TimeDay
  TIME_HOUR = TimeHour
  clear()V = Clear()
  file(Ljava/lang/String;)Ljava/io/File; = File(string)
  get()Lcom/vivalnk/sdk/utils/ACache; = Get()
  get(Landroid/content/Context;)Lcom/vivalnk/sdk/utils/ACache; = Get(Android.Content.Context)
  get(Landroid/content/Context;Ljava/lang/String;)Lcom/vivalnk/sdk/utils/ACache; = Get(Android.Content.Context, string)
  get(Landroid/content/Context;JI)Lcom/vivalnk/sdk/utils/ACache; = Get(Android.Content.Context, long, int)
  get(Ljava/io/File;)Lcom/vivalnk/sdk/utils/ACache; = Get(Java.IO.File)
  get(Ljava/io/File;JI)Lcom/vivalnk/sdk/utils/ACache; = Get(Java.IO.File, long, int)
  getAsBinary(Ljava/lang/String;)[B = GetAsBinary(string)
  getAsBitmap(Ljava/lang/String;)Landroid/graphics/Bitmap; = GetAsBitmap(string)
  getAsDrawable(Ljava/lang/String;)Landroid/graphics/drawable/Drawable; = GetAsDrawable(string)
  getAsJSONArray(Ljava/lang/String;)Lorg/json/JSONArray; = GetAsJSONArray(string)
  getAsJSONObject(Ljava/lang/String;)Lorg/json/JSONObject; = GetAsJSONObject(string)
  getAsObject(Ljava/lang/String;)Ljava/lang/Object; = GetAsObject(string)
  getAsString(Ljava/lang/String;)Ljava/lang/String; = GetAsString(string)
  myPid()Ljava/lang/String; = MyPid()
  put(Ljava/lang/String;Landroid/graphics/Bitmap;)V = Put(string, Android.Graphics.Bitmap)
  put(Ljava/lang/String;Landroid/graphics/Bitmap;I)V = Put(string, Android.Graphics.Bitmap, int)
  put(Ljava/lang/String;Landroid/graphics/drawable/Drawable;)V = Put(string, Android.Graphics.Drawables.Drawable)
  put(Ljava/lang/String;Landroid/graphics/drawable/Drawable;I)V = Put(string, Android.Graphics.Drawables.Drawable, int)
  put(Ljava/lang/String;[B)V = Put(string, byte[])
  put(Ljava/lang/String;[BI)V = Put(string, byte[], int)
  put(Ljava/lang/String;Ljava/io/Serializable;)V = Put(string, Java.IO.ISerializable)
  put(Ljava/lang/String;Ljava/io/Serializable;I)V = Put(string, Java.IO.ISerializable, int)
  put(Ljava/lang/String;Ljava/lang/String;)V = Put(string, string)
  put(Ljava/lang/String;Ljava/lang/String;I)V = Put(string, string, int)
  put(Ljava/lang/String;Lorg/json/JSONArray;)V = Put(string, Org.Json.JSONArray)
  put(Ljava/lang/String;Lorg/json/JSONArray;I)V = Put(string, Org.Json.JSONArray, int)
  put(Ljava/lang/String;Lorg/json/JSONObject;)V = Put(string, Org.Json.JSONObject)
  put(Ljava/lang/String;Lorg/json/JSONObject;I)V = Put(string, Org.Json.JSONObject, int)
  remove(Ljava/lang/String;)Z = Remove(string)
com/vivalnk/sdk/utils/BleParserUtils = Com.Vivalnk.Sdk.Utils.BleParserUtils
  <init>()V = .ctor()
  checkOneByteValue(I)I = CheckOneByteValue(int)
  checkRawRRI(I)I = CheckRawRRI(int)
  getDate([B)Ljava/util/Date; = GetDate(byte[])
  getTwoLengthStr(I)Ljava/lang/String; = GetTwoLengthStr(int)
  hexStringToByteArray(Ljava/lang/String;)[B = HexStringToByteArray(string)
  stringLeftAddZero(Ljava/lang/String;I)Ljava/lang/String; = StringLeftAddZero(string, int)
com/vivalnk/sdk/utils/DeviceUtils = Com.Vivalnk.Sdk.Utils.DeviceUtils
  <init>()V = .ctor()
  collectDeviceInfo(Landroid/content/Context;)Ljava/util/Map; = CollectDeviceInfo(Android.Content.Context)
com/vivalnk/sdk/utils/EcgSmoothUtils = Com.Vivalnk.Sdk.Utils.EcgSmoothUtils
  <init>()V = .ctor()
  filterEcg([FZ)[F = FilterEcg(float[], bool)
com/vivalnk/sdk/utils/GZipUtils = Com.Vivalnk.Sdk.Utils.GZipUtils
  <init>()V = .ctor()
  compress(Ljava/lang/String;)[B = Compress(string)
  decompress([B)Ljava/lang/String; = Decompress(byte[])
com/vivalnk/sdk/utils/Logarithm = Com.Vivalnk.Sdk.Utils.Logarithm
  <init>()V = .ctor()
  log(DD)D = Log(double, double)
com/vivalnk/sdk/utils/Timber = Com.Vivalnk.Sdk.Utils.Timber
  <init>()V = .ctor()
  FOREST = Forest
  forestAsArray = ForestAsArray
  TREE_ARRAY_EMPTY = TreeArrayEmpty
  TREE_OF_SOULS = TreeOfSouls
  asTree()Lcom/vivalnk/sdk/utils/Timber$Tree; = AsTree()
  d(Ljava/lang/String;[Ljava/lang/Object;)V = D(string, params Java.Lang.Object[])
  d(Ljava/lang/Throwable;)V = D(Java.Lang.Throwable)
  d(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = D(Java.Lang.Throwable, string, params Java.Lang.Object[])
  e(Ljava/lang/String;[Ljava/lang/Object;)V = E(string, params Java.Lang.Object[])
  e(Ljava/lang/Throwable;)V = E(Java.Lang.Throwable)
  e(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = E(Java.Lang.Throwable, string, params Java.Lang.Object[])
  forest()Ljava/util/List; = Forest()
  i(Ljava/lang/String;[Ljava/lang/Object;)V = I(string, params Java.Lang.Object[])
  i(Ljava/lang/Throwable;)V = I(Java.Lang.Throwable)
  i(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = I(Java.Lang.Throwable, string, params Java.Lang.Object[])
  log(ILjava/lang/String;[Ljava/lang/Object;)V = Log(int, string, params Java.Lang.Object[])
  log(ILjava/lang/Throwable;)V = Log(int, Java.Lang.Throwable)
  log(ILjava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = Log(int, Java.Lang.Throwable, string, params Java.Lang.Object[])
  plant(Lcom/vivalnk/sdk/utils/Timber$Tree;)V = Plant(Com.Vivalnk.Sdk.Utils.Timber.Tree)
  plant([Lcom/vivalnk/sdk/utils/Timber$Tree;)V = Plant(params Com.Vivalnk.Sdk.Utils.Timber.Tree[])
  tag(Ljava/lang/String;)Lcom/vivalnk/sdk/utils/Timber$Tree; = Tag(string)
  treeCount()I = TreeCount()
  uproot(Lcom/vivalnk/sdk/utils/Timber$Tree;)V = Uproot(Com.Vivalnk.Sdk.Utils.Timber.Tree)
  uprootAll()V = UprootAll()
  v(Ljava/lang/String;[Ljava/lang/Object;)V = V(string, params Java.Lang.Object[])
  v(Ljava/lang/Throwable;)V = V(Java.Lang.Throwable)
  v(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = V(Java.Lang.Throwable, string, params Java.Lang.Object[])
  w(Ljava/lang/String;[Ljava/lang/Object;)V = W(string, params Java.Lang.Object[])
  w(Ljava/lang/Throwable;)V = W(Java.Lang.Throwable)
  w(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = W(Java.Lang.Throwable, string, params Java.Lang.Object[])
  wtf(Ljava/lang/String;[Ljava/lang/Object;)V = Wtf(string, params Java.Lang.Object[])
  wtf(Ljava/lang/Throwable;)V = Wtf(Java.Lang.Throwable)
  wtf(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = Wtf(Java.Lang.Throwable, string, params Java.Lang.Object[])
com/vivalnk/sdk/utils/TimeUtils = Com.Vivalnk.Sdk.Utils.TimeUtils
  <init>()V = .ctor()
  getGMTTimeMillisSenconds()J = GMTTimeMillisSenconds
  bytes2Time([B)J = Bytes2Time(byte[])
  main([Ljava/lang/String;)V = Main(string[])
  time2Bytes(I)[B = Time2Bytes(int)
com/vivalnk/sdk/vital/ete/ETECode = Com.Vivalnk.Sdk.Vital.Ete.IETECode
  FAILURE = Failure
  SUCCESS = Success
com/vivalnk/sdk/vital/ete/ETEDataReceiveListener = Com.Vivalnk.Sdk.Vital.Ete.IETEDataReceiveListener
  onETEResultUpdated(Lcom/vivalnk/sdk/vital/ete/ETEResult;)V = OnETEResultUpdated(Com.Vivalnk.Sdk.Vital.Ete.ETEResult)
com/vivalnk/sdk/vital/ete/ETEManager = Com.Vivalnk.Sdk.Vital.Ete.ETEManager
  <init>()V = .ctor()
  a = A
  TAG = Tag
  getETEVersion()Ljava/lang/String; = ETEVersion
  analyzerData(Lcom/vivalnk/sdk/model/SampleData;)I = AnalyzerData(Com.Vivalnk.Sdk.Model.SampleData)
  analyzerData(J[I[Lcom/vivalnk/sdk/vital/ete/Motion;Z)I = AnalyzerData(long, int[], Com.Vivalnk.Sdk.Vital.Ete.Motion[], bool)
  analyzerData(J[I[Lcom/vivalnk/sdk/vital/ete/Motion;ZZI)I = AnalyzerData(long, int[], Com.Vivalnk.Sdk.Vital.Ete.Motion[], bool, bool, int)
  getResultSync(J)Lcom/vivalnk/sdk/vital/ete/ETEResult; = GetResultSync(long)
  init(Landroid/content/Context;)V = Init(Android.Content.Context)
  initParameter()V = InitParameter()
  registerETEDataReceiveListener(Lcom/vivalnk/sdk/vital/ete/ETEDataReceiveListener;)V = RegisterETEDataReceiveListener(Com.Vivalnk.Sdk.Vital.Ete.IETEDataReceiveListener)
  reset()V = Reset()
  setETEParameters(Lcom/vivalnk/sdk/vital/ete/ETEParameter;)I = SetETEParameters(Com.Vivalnk.Sdk.Vital.Ete.ETEParameter)
  unregisterETEDataReceiveListener()V = UnregisterETEDataReceiveListener()
com/vivalnk/sdk/vital/ete/ETEManagerImpl = Com.Vivalnk.Sdk.Vital.Ete.ETEManagerImpl
  <init>()V = .ctor()
  a = A
  b = B
  c = C
  d = D
  e = E
  f = F
  g = G
  h = H
  i = I
  j = J
  k = K
  l = L
  m = M
  n = N
  TAG = Tag
  getETEResultSync()Lfi/firstbeat/ete/ETEresults; = ETEResultSync
  getETEVersion()Ljava/lang/String; = ETEVersion
  analyzerData(Lcom/vivalnk/sdk/model/SampleData;)I = AnalyzerData(Com.Vivalnk.Sdk.Model.SampleData)
  analyzerData(J[I[Lcom/vivalnk/sdk/vital/ete/Motion;ZZ)I = AnalyzerData(long, int[], Com.Vivalnk.Sdk.Vital.Ete.Motion[], bool, bool)
  checkETEResult(ZJ)V = CheckETEResult(bool, long)
  init()V = Init()
  registerETEDataReceiveListener(Lcom/vivalnk/sdk/vital/ete/ETEDataReceiveListener;)V = RegisterETEDataReceiveListener(Com.Vivalnk.Sdk.Vital.Ete.IETEDataReceiveListener)
  reset()V = Reset()
  setETEParameters(Lcom/vivalnk/sdk/vital/ete/ETEParameter;)I = SetETEParameters(Com.Vivalnk.Sdk.Vital.Ete.ETEParameter)
  unregisterETEDataReceiveListener()V = UnregisterETEDataReceiveListener()
com/vivalnk/sdk/vital/ete/ETEOperation = Com.Vivalnk.Sdk.Vital.Ete.IETEOperation
  getETEVersion()Ljava/lang/String; = ETEVersion
  analyzerData(Lcom/vivalnk/sdk/model/SampleData;)I = AnalyzerData(Com.Vivalnk.Sdk.Model.SampleData)
  registerETEDataReceiveListener(Lcom/vivalnk/sdk/vital/ete/ETEDataReceiveListener;)V = RegisterETEDataReceiveListener(Com.Vivalnk.Sdk.Vital.Ete.IETEDataReceiveListener)
  reset()V = Reset()
  setETEParameters(Lcom/vivalnk/sdk/vital/ete/ETEParameter;)I = SetETEParameters(Com.Vivalnk.Sdk.Vital.Ete.ETEParameter)
  unregisterETEDataReceiveListener()V = UnregisterETEDataReceiveListener()
com/vivalnk/sdk/vital/ete/ETEParameter = Com.Vivalnk.Sdk.Vital.Ete.ETEParameter
  <init>()V = .ctor()
  accountId = AccountId
  age = Age
  AGE_PARAMETER_LOWER_LIMIT = AgeParameterLowerLimit
  AGE_PARAMETER_UPPER_LIMIT = AgeParameterUpperLimit
  gender = Gender
  GENDER_MEN = GenderMen
  GENDER_WOMEN = GenderWomen
  height = Height
  HEIGHT_PARAMETER_LOWER_LIMIT = HeightParameterLowerLimit
  HEIGHT_PARAMETER_UPPER_LIMIT = HeightParameterUpperLimit
  HR_PARAMETER_UPPER_LIMIT = HrParameterUpperLimit
  weight = Weight
  WEIGHT_PARAMETER_LOWER_LIMIT = WeightParameterLowerLimit
  WEIGHT_PARAMETER_UPPER_LIMIT = WeightParameterUpperLimit
com/vivalnk/sdk/vital/ete/ETEResult = Com.Vivalnk.Sdk.Vital.Ete.ETEResult
  <init>()V = .ctor()
  <init>(Lfi/firstbeat/ete/ETEresults;J)V = .ctor(FI.Firstbeat.Ete.ETEresults, long)
  dataTimeStamp = DataTimeStamp
  ETEactivityScore = ETEactivityScore
  ETEartifactPercent = ETEartifactPercent
  ETEcorrectedHr = ETEcorrectedHr
  ETEcurrentState = ETEcurrentState
  ETEenergyExpenditure = ETEenergyExpenditure
  ETEenergyExpenditureCumulative = ETEenergyExpenditureCumulative
  ETEepoc = ETEepoc
  ETEmaximalHr = ETEmaximalHr
  ETEmaximalMET = ETEmaximalMET
  ETEmaximalMETminutes = ETEmaximalMETminutes
  ETEmaximalMETpercentage = ETEmaximalMETpercentage
  ETEmaxSleepQualityIndex = ETEmaxSleepQualityIndex
  ETEmeanMAD = ETEmeanMAD
  ETEminimalHr = ETEminimalHr
  ETErelaxStressIntensity = ETErelaxStressIntensity
  ETErespirationRate = ETErespirationRate
  ETEsleepEnd = ETEsleepEnd
  ETEsleepEndCandidate = ETEsleepEndCandidate
  ETEsleepQualityIndex = ETEsleepQualityIndex
  ETEsleepStart = ETEsleepStart
  ETEstressBalance = ETEstressBalance
  ETEtrainingEffect = ETEtrainingEffect
  ETEtrainingLoadPeak = ETEtrainingLoadPeak
  serialVersionUID = SerialVersionUID
com/vivalnk/sdk/vital/ete/ETESP = Com.Vivalnk.Sdk.Vital.Ete.ETESP
  <init>()V = .ctor()
  a = A
  b = B
  DEFAULT_SP_NAME = DefaultSpName
  ETE_SP_maximalHr = ETESPMaximalHr
  ETE_SP_maximalMET = ETESPMaximalMET
  ETE_SP_maxSleepQualityIndex = ETESPMaxSleepQualityIndex
  ETE_SP_meanMAD = ETESPMeanMAD
  ETE_SP_MIN_HR = EteSpMinHr
  getInstance()Lcom/vivalnk/sdk/vital/ete/ETESP; = Instance
  clear()V = Clear()
  get(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object; = Get(string, Java.Lang.Object)
  get(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object; = Get(string, string, Java.Lang.Object)
  init(Landroid/content/Context;)V = Init(Android.Content.Context)
  put(Ljava/lang/String;Ljava/lang/Object;)V = Put(string, Java.Lang.Object)
  put(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V = Put(string, string, Java.Lang.Object)
com/vivalnk/sdk/vital/ete/Motion = Com.Vivalnk.Sdk.Vital.Ete.Motion
  <init>(III)V = .ctor(int, int, int)
  x = X
  y = Y
  z = Z
  getX()I = GetX()
  getY()I = GetY()
  getZ()I = GetZ()
fi/firstbeat/ete/ETE = FI.Firstbeat.Ete.ETE
  <init>()V = .ctor()
  <init>([B)V = .ctor(byte[])
  mInstance = MInstance
  getInstanceId()J = InstanceId
  AnalyzerStruct(Lfi/firstbeat/ete/FBTinput;)I = AnalyzerStruct(FI.Firstbeat.Ete.FBTinput)
  dispose()V = Dispose()
  ETEVersion()Ljava/lang/String; = ETEVersion()
  getInstance()[B = GetInstance()
  GetResult(Lfi/firstbeat/ete/ETEresults;)I = GetResult(FI.Firstbeat.Ete.ETEresults)
  SetExercise(Lfi/firstbeat/ete/FBTexercise;)I = SetExercise(FI.Firstbeat.Ete.FBTexercise)
  SetParameters(Lfi/firstbeat/ete/FBTvars;I)I = SetParameters(FI.Firstbeat.Ete.FBTvars, int)
  SetWalkingTest(Z)V = SetWalkingTest(bool)
fi/firstbeat/ete/ETEc = FI.Firstbeat.Ete.ETEc
  <init>()V = .ctor()
  AnalyzerStruct(Lfi/firstbeat/ete/FBTinput;J)I = AnalyzerStruct(FI.Firstbeat.Ete.FBTinput, long)
  createFromExistingInstance([B)J = CreateFromExistingInstance(byte[])
  createInstance()J = CreateInstance()
  ETEVersion()Ljava/lang/String; = ETEVersion()
  freeInstance(J)V = FreeInstance(long)
  getInstance(J)[B = GetInstance(long)
  GetResult(Lfi/firstbeat/ete/ETEresults;J)I = GetResult(FI.Firstbeat.Ete.ETEresults, long)
  SetExercise(Lfi/firstbeat/ete/FBTexercise;J)I = SetExercise(FI.Firstbeat.Ete.FBTexercise, long)
  SetParameters(Lfi/firstbeat/ete/FBTvars;IJ)I = SetParameters(FI.Firstbeat.Ete.FBTvars, int, long)
  SetWalkingTest(ZJ)V = SetWalkingTest(bool, long)
fi/firstbeat/ete/ETEresults = FI.Firstbeat.Ete.ETEresults
  <init>()V = .ctor()
  ETEactivityScore = ETEactivityScore
  ETEartifactPercent = ETEartifactPercent
  ETEcorrectedHr = ETEcorrectedHr
  ETEcurrentState = ETEcurrentState
  ETEenergyExpenditure = ETEenergyExpenditure
  ETEenergyExpenditureCumulative = ETEenergyExpenditureCumulative
  ETEepoc = ETEepoc
  ETEmaximalHr = ETEmaximalHr
  ETEmaximalMET = ETEmaximalMET
  ETEmaximalMETminutes = ETEmaximalMETminutes
  ETEmaximalMETpercentage = ETEmaximalMETpercentage
  ETEmaxSleepQualityIndex = ETEmaxSleepQualityIndex
  ETEmeanMAD = ETEmeanMAD
  ETEminimalHr = ETEminimalHr
  ETErelaxStressIntensity = ETErelaxStressIntensity
  ETErespirationRate = ETErespirationRate
  ETEsleepEnd = ETEsleepEnd
  ETEsleepEndCandidate = ETEsleepEndCandidate
  ETEsleepQualityIndex = ETEsleepQualityIndex
  ETEsleepStart = ETEsleepStart
  ETEstressBalance = ETEstressBalance
  ETEtrainingEffect = ETEtrainingEffect
  ETEtrainingLoadPeak = ETEtrainingLoadPeak
fi/firstbeat/ete/FBTexercise = FI.Firstbeat.Ete.FBTexercise
  <init>()V = .ctor()
  coolTime = CoolTime
  distance = Distance
  repeats = Repeats
  restTime = RestTime
  TE = Te
  warmupTime = WarmupTime
  workTime = WorkTime
fi/firstbeat/ete/FBTinput = FI.Firstbeat.Ete.FBTinput
  <init>()V = .ctor()
  acc = Acc
  altiSource = AltiSource
  altitude = Altitude
  Fs = Fs
  hr = Hr
  hrQuality = HrQuality
  rri = Rri
  speed = Speed
  steps = Steps
  userState = UserState
  watts = Watts
fi/firstbeat/ete/FBTvars = FI.Firstbeat.Ete.FBTvars
  <init>()V = .ctor()
  AC = Ac
  age = Age
  AT = At
  gender = Gender
  height = Height
  maxHr = MaxHr
  maxMET = MaxMET
  maxSleepQuality = MaxSleepQuality
  meanMAD = MeanMAD
  minHr = MinHr
  monthlyLoad = MonthlyLoad
  resourceRecovery = ResourceRecovery
  weight = Weight
