com/vivalnk/android/support/v18/scanner/BluetoothLeScannerCompat = Com.Vivalnk.Android.Support.V18.Scanner.BluetoothLeScannerCompat
  getScanner()Lcom/vivalnk/android/support/v18/scanner/BluetoothLeScannerCompat; = Scanner
  flushPendingScanResults(Lcom/vivalnk/android/support/v18/scanner/ScanCallback;)V = FlushPendingScanResults(Com.Vivalnk.Android.Support.V18.Scanner.ScanCallback)
  startScan(Lcom/vivalnk/android/support/v18/scanner/ScanCallback;)V = StartScan(Com.Vivalnk.Android.Support.V18.Scanner.ScanCallback)
  startScan(Ljava/util/List;Lcom/vivalnk/android/support/v18/scanner/ScanSettings;Lcom/vivalnk/android/support/v18/scanner/ScanCallback;)V = StartScan(System.Collections.Generic.IList<Com.Vivalnk.Android.Support.V18.Scanner.ScanFilter>, Com.Vivalnk.Android.Support.V18.Scanner.ScanSettings, Com.Vivalnk.Android.Support.V18.Scanner.ScanCallback)
  stopScan(Lcom/vivalnk/android/support/v18/scanner/ScanCallback;)V = StopScan(Com.Vivalnk.Android.Support.V18.Scanner.ScanCallback)
com/vivalnk/android/support/v18/scanner/ScanCallback = Com.Vivalnk.Android.Support.V18.Scanner.ScanCallback
  <init>()V = .ctor()
  SCAN_FAILED_ALREADY_STARTED = ScanFailedAlreadyStarted
  SCAN_FAILED_APPLICATION_REGISTRATION_FAILED = ScanFailedApplicationRegistrationFailed
  SCAN_FAILED_FEATURE_UNSUPPORTED = ScanFailedFeatureUnsupported
  SCAN_FAILED_INTERNAL_ERROR = ScanFailedInternalError
  SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES = ScanFailedOutOfHardwareResources
  SCAN_FAILED_SCANNING_TOO_FREQUENTLY = ScanFailedScanningTooFrequently
  onBatchScanResults(Ljava/util/List;)V = OnBatchScanResults(System.Collections.Generic.IList<Com.Vivalnk.Android.Support.V18.Scanner.ScanResult>)
  onScanFailed(I)V = OnScanFailed(int)
  onScanResult(ILcom/vivalnk/android/support/v18/scanner/ScanResult;)V = OnScanResult(int, Com.Vivalnk.Android.Support.V18.Scanner.ScanResult)
com/vivalnk/android/support/v18/scanner/ScanFilter = Com.Vivalnk.Android.Support.V18.Scanner.ScanFilter
  CREATOR = Creator
  getDeviceAddress()Ljava/lang/String; = DeviceAddress
  getDeviceName()Ljava/lang/String; = DeviceName
  getManufacturerId()I = ManufacturerId
  getServiceDataUuid()Landroid/os/ParcelUuid; = ServiceDataUuid
  getServiceUuid()Landroid/os/ParcelUuid; = ServiceUuid
  getServiceUuidMask()Landroid/os/ParcelUuid; = ServiceUuidMask
  describeContents()I = DescribeContents()
  getManufacturerData()[B = GetManufacturerData()
  getManufacturerDataMask()[B = GetManufacturerDataMask()
  getServiceData()[B = GetServiceData()
  getServiceDataMask()[B = GetServiceDataMask()
  matches(Lcom/vivalnk/android/support/v18/scanner/ScanResult;)Z = Matches(Com.Vivalnk.Android.Support.V18.Scanner.ScanResult)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/vivalnk/android/support/v18/scanner/ScanRecord = Com.Vivalnk.Android.Support.V18.Scanner.ScanRecord
  getAdvertiseFlags()I = AdvertiseFlags
  getDeviceName()Ljava/lang/String; = DeviceName
  getManufacturerSpecificData()Landroid/util/SparseArray; = ManufacturerSpecificData
  getServiceData()Ljava/util/Map; = ServiceData
  getServiceUuids()Ljava/util/List; = ServiceUuids
  getTxPowerLevel()I = TxPowerLevel
  getBytes()[B = GetBytes()
  getManufacturerSpecificData(I)[B = GetManufacturerSpecificData(int)
  getServiceData(Landroid/os/ParcelUuid;)[B = GetServiceData(Android.OS.ParcelUuid)
com/vivalnk/android/support/v18/scanner/ScanResult = Com.Vivalnk.Android.Support.V18.Scanner.ScanResult
  <init>(Landroid/bluetooth/BluetoothDevice;IIIIIIILcom/vivalnk/android/support/v18/scanner/ScanRecord;J)V = .ctor(Android.Bluetooth.BluetoothDevice, int, int, int, int, int, int, int, Com.Vivalnk.Android.Support.V18.Scanner.ScanRecord, long)
  <init>(Landroid/bluetooth/BluetoothDevice;Lcom/vivalnk/android/support/v18/scanner/ScanRecord;IJ)V = .ctor(Android.Bluetooth.BluetoothDevice, Com.Vivalnk.Android.Support.V18.Scanner.ScanRecord, int, long)
  CREATOR = Creator
  DATA_COMPLETE = DataComplete
  DATA_TRUNCATED = DataTruncated
  PERIODIC_INTERVAL_NOT_PRESENT = PeriodicIntervalNotPresent
  PHY_UNUSED = PhyUnused
  SID_NOT_PRESENT = SidNotPresent
  TX_POWER_NOT_PRESENT = TxPowerNotPresent
  getAdvertisingSid()I = AdvertisingSid
  getDataStatus()I = DataStatus
  getDevice()Landroid/bluetooth/BluetoothDevice; = Device
  isConnectable()Z = IsConnectable
  isLegacy()Z = IsLegacy
  getPeriodicAdvertisingInterval()I = PeriodicAdvertisingInterval
  getPrimaryPhy()I = PrimaryPhy
  getRssi()I = Rssi
  getScanRecord()Lcom/vivalnk/android/support/v18/scanner/ScanRecord; = ScanRecord
  getSecondaryPhy()I = SecondaryPhy
  getTimestampNanos()J = TimestampNanos
  getTxPower()I = TxPower
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/vivalnk/android/support/v18/scanner/ScanSettings = Com.Vivalnk.Android.Support.V18.Scanner.ScanSettings
  CALLBACK_TYPE_ALL_MATCHES = CallbackTypeAllMatches
  CALLBACK_TYPE_FIRST_MATCH = CallbackTypeFirstMatch
  CALLBACK_TYPE_MATCH_LOST = CallbackTypeMatchLost
  CREATOR = Creator
  MATCH_LOST_DEVICE_TIMEOUT_DEFAULT = MatchLostDeviceTimeoutDefault
  MATCH_LOST_TASK_INTERVAL_DEFAULT = MatchLostTaskIntervalDefault
  MATCH_MODE_AGGRESSIVE = MatchModeAggressive
  MATCH_MODE_STICKY = MatchModeSticky
  MATCH_NUM_FEW_ADVERTISEMENT = MatchNumFewAdvertisement
  MATCH_NUM_MAX_ADVERTISEMENT = MatchNumMaxAdvertisement
  MATCH_NUM_ONE_ADVERTISEMENT = MatchNumOneAdvertisement
  PHY_LE_ALL_SUPPORTED = PhyLeAllSupported
  SCAN_MODE_BALANCED = ScanModeBalanced
  SCAN_MODE_LOW_LATENCY = ScanModeLowLatency
  SCAN_MODE_LOW_POWER = ScanModeLowPower
  SCAN_MODE_OPPORTUNISTIC = ScanModeOpportunistic
  getCallbackType()I = CallbackType
  hasPowerSaveMode()Z = HasPowerSaveMode
  getLegacy()Z = Legacy
  getMatchLostDeviceTimeout()J = MatchLostDeviceTimeout
  getMatchLostTaskInterval()J = MatchLostTaskInterval
  getMatchMode()I = MatchMode
  getNumOfMatches()I = NumOfMatches
  getPhy()I = Phy
  getPowerSaveRest()J = PowerSaveRest
  getPowerSaveScan()J = PowerSaveScan
  getReportDelayMillis()J = ReportDelayMillis
  getScanMode()I = ScanMode
  getScanResultType()I = ScanResultType
  getUseHardwareBatchingIfSupported()Z = UseHardwareBatchingIfSupported
  getUseHardwareCallbackTypesIfSupported()Z = UseHardwareCallbackTypesIfSupported
  getUseHardwareFilteringIfSupported()Z = UseHardwareFilteringIfSupported
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/vivalnk/sdk/common/ble/BaseUUID = Com.Vivalnk.Sdk.Common.Ble.BaseUUID
  <init>()V = .ctor()
com/vivalnk/sdk/common/ble/BleConstants = Com.Vivalnk.Sdk.Common.Ble.BleConstants
  <init>()V = .ctor()
  CLIENT_CHARACTERISTIC_CONFIG = ClientCharacteristicConfig
  STATUS_DEVICE_BOND_BONDED = StatusDeviceBondBonded
  STATUS_DEVICE_BOND_BONDING = StatusDeviceBondBonding
  STATUS_DEVICE_BOND_NONE = StatusDeviceBondNone
  STATUS_DEVICE_CONNECTED = StatusDeviceConnected
  STATUS_DEVICE_CONNECTING = StatusDeviceConnecting
  STATUS_DEVICE_DISABLE_NOTIFY = StatusDeviceDisableNotify
  STATUS_DEVICE_DISCONNECTED = StatusDeviceDisconnected
  STATUS_DEVICE_DISCONNECTING = StatusDeviceDisconnecting
  STATUS_DEVICE_DISWATCHED = StatusDeviceDiswatched
  STATUS_DEVICE_ENABLE_NOTIFY = StatusDeviceEnableNotify
  STATUS_DEVICE_SERVICE_READY = StatusDeviceServiceReady
  STATUS_DEVICE_WATCHED = StatusDeviceWatched
  STATUS_UNKNOWN = StatusUnknown
  getStatusText(I)Ljava/lang/String; = GetStatusText(int)
com/vivalnk/sdk/common/ble/BleDeviceManager = Com.Vivalnk.Sdk.Common.Ble.BleDeviceManager
  <init>()V = .ctor()
  checkBleRuntime(Landroid/content/Context;)I = CheckBleRuntime(Android.Content.Context)
  clearAllRequest(Ljava/lang/String;)V = ClearAllRequest(string)
  closeIndicate(Ljava/lang/String;Ljava/util/UUID;Ljava/util/UUID;Lcom/vivalnk/sdk/common/ble/connect/request/IndicateRequest$IndicateListener;Z)V = CloseIndicate(string, Java.Util.UUID, Java.Util.UUID, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.IndicateRequest.IIndicateListener, bool)
  closeNotify(Ljava/lang/String;Ljava/util/UUID;Ljava/util/UUID;Lcom/vivalnk/sdk/common/ble/connect/request/NotifyRequest$NotifyChangeListener;Z)V = CloseNotify(string, Java.Util.UUID, Java.Util.UUID, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.NotifyRequest.INotifyChangeListener, bool)
  connect(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/BleConnectOptions;Lcom/vivalnk/sdk/common/ble/connect/BleConnectMaster$BluetoothConnectListener;)V = Connect(string, Com.Vivalnk.Sdk.Common.Ble.Connect.BleConnectOptions, Com.Vivalnk.Sdk.Common.Ble.Connect.BleConnectMaster.IBluetoothConnectListener)
  destroy()V = Destroy()
  disableBle()V = DisableBle()
  disconnect(Ljava/lang/String;)V = Disconnect(string)
  disconnect(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/BleConnectMaster$BluetoothConnectListener;)V = Disconnect(string, Com.Vivalnk.Sdk.Common.Ble.Connect.BleConnectMaster.IBluetoothConnectListener)
  disconnectAll()V = DisconnectAll()
  disconnectQuietly(Ljava/lang/String;)V = DisconnectQuietly(string)
  enableBle()V = EnableBle()
  getBluetoothDevice(Ljava/lang/String;)Landroid/bluetooth/BluetoothDevice; = GetBluetoothDevice(string)
  getConnectStatus(Ljava/lang/String;)I = GetConnectStatus(string)
  init(Landroid/content/Context;)V = Init(Android.Content.Context)
  isConnected(Ljava/lang/String;)Z = IsConnected(string)
  isConnecting(Ljava/lang/String;)Z = IsConnecting(string)
  openIndicate(Ljava/lang/String;Ljava/util/UUID;Ljava/util/UUID;Lcom/vivalnk/sdk/common/ble/connect/request/IndicateRequest$IndicateListener;Z)V = OpenIndicate(string, Java.Util.UUID, Java.Util.UUID, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.IndicateRequest.IIndicateListener, bool)
  openNotify(Ljava/lang/String;Ljava/util/UUID;Ljava/util/UUID;Lcom/vivalnk/sdk/common/ble/connect/request/NotifyRequest$NotifyChangeListener;Z)V = OpenNotify(string, Java.Util.UUID, Java.Util.UUID, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.NotifyRequest.INotifyChangeListener, bool)
  readCharacter(Ljava/lang/String;Ljava/util/UUID;Ljava/util/UUID;Lcom/vivalnk/sdk/common/ble/connect/request/CharacterRead$CharacterReadListener;Z)V = ReadCharacter(string, Java.Util.UUID, Java.Util.UUID, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterRead.ICharacterReadListener, bool)
  readDescriptor(Ljava/lang/String;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/UUID;Lcom/vivalnk/sdk/common/ble/connect/request/DescriptorRead$DescriptorReadListener;Z)V = ReadDescriptor(string, Java.Util.UUID, Java.Util.UUID, Java.Util.UUID, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DescriptorRead.IDescriptorReadListener, bool)
  readRemoteRssi(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/request/ReadRemoteRssi$ReadRssiListener;Z)V = ReadRemoteRssi(string, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.ReadRemoteRssi.IReadRssiListener, bool)
  refreshDeviceCache(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/request/RefreshCache$RefreshCacheListener;Z)V = RefreshDeviceCache(string, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.RefreshCache.IRefreshCacheListener, bool)
  registBluetoothReceiver(Landroid/content/BroadcastReceiver;)V = RegistBluetoothReceiver(Android.Content.BroadcastReceiver)
  requestMtu(Ljava/lang/String;ILcom/vivalnk/sdk/common/ble/connect/request/MtuRequest$MtuListener;Z)V = RequestMtu(string, int, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.MtuRequest.IMtuListener, bool)
  setContext(Landroid/content/Context;)V = SetContext(Android.Content.Context)
  startScan(Lcom/vivalnk/sdk/common/ble/scan/ScanOptions;Lcom/vivalnk/sdk/common/ble/scan/BleScanListener;)V = StartScan(Com.Vivalnk.Sdk.Common.Ble.Scan.ScanOptions, Com.Vivalnk.Sdk.Common.Ble.Scan.IBleScanListener)
  stopScan()V = StopScan()
  unregistAllReceiver()V = UnregistAllReceiver()
  unregistBluetoothReceiver()V = UnregistBluetoothReceiver()
  writeCharacter(Ljava/lang/String;Ljava/util/UUID;Ljava/util/UUID;[BLcom/vivalnk/sdk/common/ble/connect/request/CharacterWrite$CharacterWriteListener;Z)V = WriteCharacter(string, Java.Util.UUID, Java.Util.UUID, byte[], Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterWrite.ICharacterWriteListener, bool)
  writeCharacterNoRsp(Ljava/lang/String;Ljava/util/UUID;Ljava/util/UUID;[BLcom/vivalnk/sdk/common/ble/connect/request/CharacterWrite$CharacterWriteListener;Z)V = WriteCharacterNoRsp(string, Java.Util.UUID, Java.Util.UUID, byte[], Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterWrite.ICharacterWriteListener, bool)
  writeCharacterReliable(Ljava/lang/String;Ljava/util/UUID;Ljava/util/UUID;[BLcom/vivalnk/sdk/common/ble/connect/request/CharacterWriteReliable$CharacterWriteReliableListener;Z)V = WriteCharacterReliable(string, Java.Util.UUID, Java.Util.UUID, byte[], Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterWriteReliable.ICharacterWriteReliableListener, bool)
  writeDescriptor(Ljava/lang/String;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/UUID;[BLcom/vivalnk/sdk/common/ble/connect/request/DescriptorWrite$DescriptorWriteListener;Z)V = WriteDescriptor(string, Java.Util.UUID, Java.Util.UUID, Java.Util.UUID, byte[], Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DescriptorWrite.IDescriptorWriteListener, bool)
com/vivalnk/sdk/common/ble/BleManagerInterface = Com.Vivalnk.Sdk.Common.Ble.IBleManagerInterface
com/vivalnk/sdk/common/ble/BleRuntimeChecker = Com.Vivalnk.Sdk.Common.Ble.BleRuntimeChecker
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  BLUETOOTH_NOT_AVAILABLE = BluetoothNotAvailable
  BLUETOOTH_NOT_ENABLED = BluetoothNotEnabled
  CHECK_RESULT_OK = CheckResultOk
  NO_BLUETOOTH_ADMIN_PERMISSION = NoBluetoothAdminPermission
  NO_BLUETOOTH_PERMISSION = NoBluetoothPermission
  NOT_SUPPORT_BLE = NotSupportBle
  SDCARD_NOT_AVAILABLE = SdcardNotAvailable
  checkBleRuntime(Landroid/content/Context;)I = CheckBleRuntime(Android.Content.Context)
  checkRuntime(Landroid/content/Context;)I = CheckRuntime(Android.Content.Context)
  hasBluetoothAdminPermission(I)Z = HasBluetoothAdminPermission(int)
  hasBluetoothPermission(I)Z = HasBluetoothPermission(int)
  isBluetoothAvailable(I)Z = IsBluetoothAvailable(int)
  isBluetoothEnable(I)Z = IsBluetoothEnable(int)
  isSDCardAvailable(I)Z = IsSDCardAvailable(int)
  isSupportBLE(I)Z = IsSupportBLE(int)
com/vivalnk/sdk/common/ble/BleRuntimeChecker18 = Com.Vivalnk.Sdk.Common.Ble.BleRuntimeChecker18
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  NO_SDCARD_PERMISSION = NoSdcardPermission
  hasSDCardPermission(I)Z = HasSDCardPermission(int)
com/vivalnk/sdk/common/ble/BleRuntimeChecker23 = Com.Vivalnk.Sdk.Common.Ble.BleRuntimeChecker23
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  LOCATION_NOT_ENABLED = LocationNotEnabled
  NO_LOCATION_PERMISSION = NoLocationPermission
  hasLocationPermission(I)Z = HasLocationPermission(int)
  isLocationEnable(I)Z = IsLocationEnable(int)
com/vivalnk/sdk/common/ble/connect/base/AbsDefaulRequest = Com.Vivalnk.Sdk.Common.Ble.Connect.Base.AbsDefaulRequest
  <init>()V = .ctor()
  discoverService(Lcom/vivalnk/sdk/common/ble/connect/request/DiscoverService$DiscoverServiceListener;Z)V = DiscoverService(Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DiscoverService.IDiscoverServiceListener, bool)
  readCharacteristic(Ljava/util/UUID;Ljava/util/UUID;Lcom/vivalnk/sdk/common/ble/connect/request/CharacterRead$CharacterReadListener;Z)V = ReadCharacteristic(Java.Util.UUID, Java.Util.UUID, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterRead.ICharacterReadListener, bool)
  readDescriptor(Ljava/util/UUID;Ljava/util/UUID;Ljava/util/UUID;Lcom/vivalnk/sdk/common/ble/connect/request/DescriptorRead$DescriptorReadListener;Z)V = ReadDescriptor(Java.Util.UUID, Java.Util.UUID, Java.Util.UUID, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DescriptorRead.IDescriptorReadListener, bool)
  readRemoteRssi(Lcom/vivalnk/sdk/common/ble/connect/request/ReadRemoteRssi$ReadRssiListener;Z)V = ReadRemoteRssi(Com.Vivalnk.Sdk.Common.Ble.Connect.Request.ReadRemoteRssi.IReadRssiListener, bool)
  requestMtu(ILcom/vivalnk/sdk/common/ble/connect/request/MtuRequest$MtuListener;Z)V = RequestMtu(int, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.MtuRequest.IMtuListener, bool)
  setCharacteristicIndication(Ljava/util/UUID;Ljava/util/UUID;ZLcom/vivalnk/sdk/common/ble/connect/request/IndicateRequest$IndicateListener;Z)V = SetCharacteristicIndication(Java.Util.UUID, Java.Util.UUID, bool, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.IndicateRequest.IIndicateListener, bool)
  setCharacteristicNotification(Ljava/util/UUID;Ljava/util/UUID;ZLcom/vivalnk/sdk/common/ble/connect/request/NotifyRequest$NotifyChangeListener;Z)V = SetCharacteristicNotification(Java.Util.UUID, Java.Util.UUID, bool, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.NotifyRequest.INotifyChangeListener, bool)
  writeCharacteristic(Ljava/util/UUID;Ljava/util/UUID;[BLcom/vivalnk/sdk/common/ble/connect/request/CharacterWrite$CharacterWriteListener;Z)V = WriteCharacteristic(Java.Util.UUID, Java.Util.UUID, byte[], Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterWrite.ICharacterWriteListener, bool)
  writeCharacteristicReliable(Ljava/util/UUID;Ljava/util/UUID;[BLcom/vivalnk/sdk/common/ble/connect/request/CharacterWriteReliable$CharacterWriteReliableListener;Z)V = WriteCharacteristicReliable(Java.Util.UUID, Java.Util.UUID, byte[], Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterWriteReliable.ICharacterWriteReliableListener, bool)
  writeDescriptor(Ljava/util/UUID;Ljava/util/UUID;Ljava/util/UUID;[BLcom/vivalnk/sdk/common/ble/connect/request/DescriptorWrite$DescriptorWriteListener;Z)V = WriteDescriptor(Java.Util.UUID, Java.Util.UUID, Java.Util.UUID, byte[], Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DescriptorWrite.IDescriptorWriteListener, bool)
com/vivalnk/sdk/common/ble/connect/base/BaseGattIOOperation = Com.Vivalnk.Sdk.Common.Ble.Connect.Base.BaseGattIOOperation
  <init>(Landroid/content/Context;Ljava/lang/String;)V = .ctor(Android.Content.Context, string)
  currentRequest = CurrentRequest
  dispatcher = Dispatcher
  mac = Mac
  mContext = MContext
  mMainHandler = MMainHandler
  mWorkerHandler = MWorkerHandler
  getCurrentRequest()Lcom/vivalnk/sdk/common/ble/connect/base/BaseIORequest; = CurrentRequest
  setCurrentRequest(Lcom/vivalnk/sdk/common/ble/connect/base/BaseIORequest;)V = CurrentRequest
  clearAllRequest()V = ClearAllRequest()
  closeIndicate(Lcom/vivalnk/sdk/common/ble/connect/request/IndicateRequest$IndicateListener;Ljava/util/UUID;Ljava/util/UUID;Z)V = CloseIndicate(Com.Vivalnk.Sdk.Common.Ble.Connect.Request.IndicateRequest.IIndicateListener, Java.Util.UUID, Java.Util.UUID, bool)
  discoverService(Lcom/vivalnk/sdk/common/ble/connect/request/DiscoverService$DiscoverServiceListener;Z)V = DiscoverService(Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DiscoverService.IDiscoverServiceListener, bool)
  handleMessage(Landroid/os/Message;)Z = HandleMessage(Android.OS.Message)
  notify(Ljava/util/UUID;Ljava/util/UUID;Lcom/vivalnk/sdk/common/ble/connect/request/NotifyRequest$NotifyChangeListener;Z)V = Notify(Java.Util.UUID, Java.Util.UUID, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.NotifyRequest.INotifyChangeListener, bool)
  openIndicate(Lcom/vivalnk/sdk/common/ble/connect/request/IndicateRequest$IndicateListener;Ljava/util/UUID;Ljava/util/UUID;Z)V = OpenIndicate(Com.Vivalnk.Sdk.Common.Ble.Connect.Request.IndicateRequest.IIndicateListener, Java.Util.UUID, Java.Util.UUID, bool)
  readCharacteristic(Ljava/util/UUID;Ljava/util/UUID;Lcom/vivalnk/sdk/common/ble/connect/request/CharacterRead$CharacterReadListener;Z)V = ReadCharacteristic(Java.Util.UUID, Java.Util.UUID, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterRead.ICharacterReadListener, bool)
  readDescriptor(Ljava/util/UUID;Ljava/util/UUID;Ljava/util/UUID;Lcom/vivalnk/sdk/common/ble/connect/request/DescriptorRead$DescriptorReadListener;Z)V = ReadDescriptor(Java.Util.UUID, Java.Util.UUID, Java.Util.UUID, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DescriptorRead.IDescriptorReadListener, bool)
  readRemoteRssi(Lcom/vivalnk/sdk/common/ble/connect/request/ReadRemoteRssi$ReadRssiListener;Z)V = ReadRemoteRssi(Com.Vivalnk.Sdk.Common.Ble.Connect.Request.ReadRemoteRssi.IReadRssiListener, bool)
  refreshDeviceCache(Lcom/vivalnk/sdk/common/ble/connect/request/RefreshCache$RefreshCacheListener;)V = RefreshDeviceCache(Com.Vivalnk.Sdk.Common.Ble.Connect.Request.RefreshCache.IRefreshCacheListener)
  requestMtu(ILcom/vivalnk/sdk/common/ble/connect/request/MtuRequest$MtuListener;Z)V = RequestMtu(int, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.MtuRequest.IMtuListener, bool)
  setCharacteristicIndication(Ljava/util/UUID;Ljava/util/UUID;ZLcom/vivalnk/sdk/common/ble/connect/request/IndicateRequest$IndicateListener;Z)V = SetCharacteristicIndication(Java.Util.UUID, Java.Util.UUID, bool, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.IndicateRequest.IIndicateListener, bool)
  setCharacteristicNotification(Ljava/util/UUID;Ljava/util/UUID;ZLcom/vivalnk/sdk/common/ble/connect/request/NotifyRequest$NotifyChangeListener;Z)V = SetCharacteristicNotification(Java.Util.UUID, Java.Util.UUID, bool, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.NotifyRequest.INotifyChangeListener, bool)
  unnotify(Ljava/util/UUID;Ljava/util/UUID;Lcom/vivalnk/sdk/common/ble/connect/request/NotifyRequest$NotifyChangeListener;Z)V = Unnotify(Java.Util.UUID, Java.Util.UUID, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.NotifyRequest.INotifyChangeListener, bool)
  writeCharacteristic(Ljava/util/UUID;Ljava/util/UUID;[BLcom/vivalnk/sdk/common/ble/connect/request/CharacterWrite$CharacterWriteListener;Z)V = WriteCharacteristic(Java.Util.UUID, Java.Util.UUID, byte[], Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterWrite.ICharacterWriteListener, bool)
  writeDescriptor(Ljava/util/UUID;Ljava/util/UUID;Ljava/util/UUID;[BLcom/vivalnk/sdk/common/ble/connect/request/DescriptorWrite$DescriptorWriteListener;Z)V = WriteDescriptor(Java.Util.UUID, Java.Util.UUID, Java.Util.UUID, byte[], Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DescriptorWrite.IDescriptorWriteListener, bool)
com/vivalnk/sdk/common/ble/connect/base/BaseIORequest = Com.Vivalnk.Sdk.Common.Ble.Connect.Base.BaseIORequest
  <init>(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/base/RequestCallback;Lcom/vivalnk/sdk/common/ble/connect/base/IORequestOptions;)V = .ctor(string, Com.Vivalnk.Sdk.Common.Ble.Connect.Base.IRequestCallback, Com.Vivalnk.Sdk.Common.Ble.Connect.Base.IORequestOptions)
  callback = Callback
  connectMaster = ConnectMaster
  dispatcher = Dispatcher
  mac = Mac
  mContext = MContext
  mMainHandler = MMainHandler
  MSG_REQUEST_TIMEOUT = MsgRequestTimeout
  requestOptions = RequestOptions
  requestTimeout = RequestTimeout
  getBleGattProfile()Lcom/vivalnk/sdk/common/ble/model/BleGattProfile; = BleGattProfile
  getBluetoothDevice()Landroid/bluetooth/BluetoothDevice; = BluetoothDevice
  getBluetoothGatt()Landroid/bluetooth/BluetoothGatt; = BluetoothGatt
  getCurrentStatus()I = CurrentStatus
  getDeviceProfile()Ljava/util/Map; = DeviceProfile
  getMac()Ljava/lang/String; = Mac
  getRequestName()Ljava/lang/String; = RequestName
  getRequestTimeout()J = RequestTimeout
  cancel()V = Cancel()
  finishRequest()V = FinishRequest()
  getCharacter(Ljava/util/UUID;Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattCharacteristic; = GetCharacter(Java.Util.UUID, Java.Util.UUID)
  handleMessage(Landroid/os/Message;)Z = HandleMessage(Android.OS.Message)
  onBluetoothStateChange(Ljava/lang/Integer;)V = OnBluetoothStateChange(Java.Lang.Integer)
  onError(ILjava/lang/String;)V = OnError(int, string)
  onStart()V = OnStart()
  process()V = Process()
  process(Lcom/vivalnk/sdk/common/ble/connect/listener/IBleDispatcher;)V = Process(Com.Vivalnk.Sdk.Common.Ble.Connect.Listener.IBleDispatcher)
  processRequest()V = ProcessRequest()
  setConnectMaster(Lcom/vivalnk/sdk/common/ble/connect/base/BaseGattIOOperation;)V = SetConnectMaster(Com.Vivalnk.Sdk.Common.Ble.Connect.Base.BaseGattIOOperation)
  setContext(Landroid/content/Context;)V = SetContext(Android.Content.Context)
  setDispatcher(Lcom/vivalnk/sdk/common/ble/connect/listener/IBleDispatcher;)V = SetDispatcher(Com.Vivalnk.Sdk.Common.Ble.Connect.Listener.IBleDispatcher)
  startRequestTiming()V = StartRequestTiming()
  stopRequestTiming()V = StopRequestTiming()
com/vivalnk/sdk/common/ble/connect/base/IConnectOperation = Com.Vivalnk.Sdk.Common.Ble.Connect.Base.IConnectOperation
  isConnected()Z = IsConnected
  isConnecting()Z = IsConnecting
  connect(Lcom/vivalnk/sdk/common/ble/connect/BleConnectOptions;Lcom/vivalnk/sdk/common/ble/connect/BleConnectMaster$BluetoothConnectListener;)V = Connect(Com.Vivalnk.Sdk.Common.Ble.Connect.BleConnectOptions, Com.Vivalnk.Sdk.Common.Ble.Connect.BleConnectMaster.IBluetoothConnectListener)
com/vivalnk/sdk/common/ble/connect/base/IOOperation = Com.Vivalnk.Sdk.Common.Ble.Connect.Base.IOOperation
  discoverService(Lcom/vivalnk/sdk/common/ble/connect/request/DiscoverService$DiscoverServiceListener;Z)V = DiscoverService(Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DiscoverService.IDiscoverServiceListener, bool)
  readCharacteristic(Ljava/util/UUID;Ljava/util/UUID;Lcom/vivalnk/sdk/common/ble/connect/request/CharacterRead$CharacterReadListener;Z)V = ReadCharacteristic(Java.Util.UUID, Java.Util.UUID, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterRead.ICharacterReadListener, bool)
  readDescriptor(Ljava/util/UUID;Ljava/util/UUID;Ljava/util/UUID;Lcom/vivalnk/sdk/common/ble/connect/request/DescriptorRead$DescriptorReadListener;Z)V = ReadDescriptor(Java.Util.UUID, Java.Util.UUID, Java.Util.UUID, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DescriptorRead.IDescriptorReadListener, bool)
  readRemoteRssi(Lcom/vivalnk/sdk/common/ble/connect/request/ReadRemoteRssi$ReadRssiListener;Z)V = ReadRemoteRssi(Com.Vivalnk.Sdk.Common.Ble.Connect.Request.ReadRemoteRssi.IReadRssiListener, bool)
  requestMtu(ILcom/vivalnk/sdk/common/ble/connect/request/MtuRequest$MtuListener;Z)V = RequestMtu(int, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.MtuRequest.IMtuListener, bool)
  setCharacteristicIndication(Ljava/util/UUID;Ljava/util/UUID;ZLcom/vivalnk/sdk/common/ble/connect/request/IndicateRequest$IndicateListener;Z)V = SetCharacteristicIndication(Java.Util.UUID, Java.Util.UUID, bool, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.IndicateRequest.IIndicateListener, bool)
  setCharacteristicNotification(Ljava/util/UUID;Ljava/util/UUID;ZLcom/vivalnk/sdk/common/ble/connect/request/NotifyRequest$NotifyChangeListener;Z)V = SetCharacteristicNotification(Java.Util.UUID, Java.Util.UUID, bool, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.NotifyRequest.INotifyChangeListener, bool)
  writeCharacteristic(Ljava/util/UUID;Ljava/util/UUID;[BLcom/vivalnk/sdk/common/ble/connect/request/CharacterWrite$CharacterWriteListener;Z)V = WriteCharacteristic(Java.Util.UUID, Java.Util.UUID, byte[], Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterWrite.ICharacterWriteListener, bool)
  writeDescriptor(Ljava/util/UUID;Ljava/util/UUID;Ljava/util/UUID;[BLcom/vivalnk/sdk/common/ble/connect/request/DescriptorWrite$DescriptorWriteListener;Z)V = WriteDescriptor(Java.Util.UUID, Java.Util.UUID, Java.Util.UUID, byte[], Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DescriptorWrite.IDescriptorWriteListener, bool)
com/vivalnk/sdk/common/ble/connect/base/IORequestOptions = Com.Vivalnk.Sdk.Common.Ble.Connect.Base.IORequestOptions
  isLoggable()Z = IsLoggable
  getRequestTimeout()J = RequestTimeout
com/vivalnk/sdk/common/ble/connect/base/RequestCallback = Com.Vivalnk.Sdk.Common.Ble.Connect.Base.IRequestCallback
com/vivalnk/sdk/common/ble/connect/BleConnectMaster = Com.Vivalnk.Sdk.Common.Ble.Connect.BleConnectMaster
  <init>(Landroid/content/Context;Ljava/lang/String;)V = .ctor(Android.Content.Context, string)
  MSG_CONNECT_DISCOVER_SERVICE = MsgConnectDiscoverService
  MSG_CONNECT_ON_CONNECTED = MsgConnectOnConnected
  MSG_CONNECT_ON_DISCONNECTED = MsgConnectOnDisconnected
  MSG_CONNECT_TIMEOUT = MsgConnectTimeout
  TAG = Tag
  getBleGattProfile()Lcom/vivalnk/sdk/common/ble/model/BleGattProfile; = BleGattProfile
  getBluetoothDevice()Landroid/bluetooth/BluetoothDevice; = BluetoothDevice
  getBluetoothGatt()Landroid/bluetooth/BluetoothGatt; = BluetoothGatt
  getConnectStatus()I = ConnectStatus
  setConnectStatus(I)V = ConnectStatus
  getDeviceProfile()Ljava/util/Map; = DeviceProfile
  isConnected()Z = IsConnected
  isConnecting()Z = IsConnecting
  checkBleRuntime()I = CheckBleRuntime()
  connect(Lcom/vivalnk/sdk/common/ble/connect/BleConnectOptions;Lcom/vivalnk/sdk/common/ble/connect/BleConnectMaster$BluetoothConnectListener;)V = Connect(Com.Vivalnk.Sdk.Common.Ble.Connect.BleConnectOptions, Com.Vivalnk.Sdk.Common.Ble.Connect.BleConnectMaster.IBluetoothConnectListener)
  destroy()V = Destroy()
  disconnect()V = Disconnect()
  disconnect(Lcom/vivalnk/sdk/common/ble/connect/BleConnectMaster$BluetoothConnectListener;)V = Disconnect(Com.Vivalnk.Sdk.Common.Ble.Connect.BleConnectMaster.IBluetoothConnectListener)
  disconnectQuietly()V = DisconnectQuietly()
  getCharacter(Ljava/util/UUID;Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattCharacteristic; = GetCharacter(Java.Util.UUID, Java.Util.UUID)
  isDeviceConnected(Ljava/lang/String;)Z = IsDeviceConnected(string)
  onBluetoothStateChange(Lcom/vivalnk/sdk/common/ble/connect/event/BluetoothStateEvent;)V = OnBluetoothStateChange(Com.Vivalnk.Sdk.Common.Ble.Connect.Event.BluetoothStateEvent)
  onBondStateChange(Lcom/vivalnk/sdk/common/ble/connect/event/BondEvent;)V = OnBondStateChange(Com.Vivalnk.Sdk.Common.Ble.Connect.Event.BondEvent)
  onConnectionUpdated(III)V = OnConnectionUpdated(int, int, int)
  onOTAEvent(Lcom/vivalnk/sdk/common/ble/connect/event/OTAEvent;)V = OnOTAEvent(Com.Vivalnk.Sdk.Common.Ble.Connect.Event.OTAEvent)
  onPairRequest(Lcom/vivalnk/sdk/common/ble/connect/event/PairRequestEvent;)V = OnPairRequest(Com.Vivalnk.Sdk.Common.Ble.Connect.Event.PairRequestEvent)
  startConnectTiming()V = StartConnectTiming()
  stopConnectTiming()V = StopConnectTiming()
com/vivalnk/sdk/common/ble/connect/BleConnectOptions = Com.Vivalnk.Sdk.Common.Ble.Connect.BleConnectOptions
  CONNECT_RETRY_INFINITY = ConnectRetryInfinity
  DEFAULT_CONNECT_RETRY = DefaultConnectRetry
  DEFAULT_CONNECT_TIMEOUT = DefaultConnectTimeout
  DEFAULT_SERVICE_DISCOVER_RETRY = DefaultServiceDiscoverRetry
  DEFAULT_SERVICE_DISCOVER_TIMEOUT = DefaultServiceDiscoverTimeout
  getConnectRetry()I = ConnectRetry
  getConnectTimeout()J = ConnectTimeout
  isAutoConnect()Z = IsAutoConnect
  getServiceDiscoverRetry()I = ServiceDiscoverRetry
  getServiceDiscoverTimeout()J = ServiceDiscoverTimeout
com/vivalnk/sdk/common/ble/connect/BleGattProfileManager = Com.Vivalnk.Sdk.Common.Ble.Connect.BleGattProfileManager
  <init>(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/request/DiscoverService$DiscoverServiceListener;)V = .ctor(string, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DiscoverService.IDiscoverServiceListener)
  TAG = Tag
  getBleGattProfile()Lcom/vivalnk/sdk/common/ble/model/BleGattProfile; = BleGattProfile
  getDeviceProfile()Ljava/util/Map; = DeviceProfile
  clear()V = Clear()
  getCharacter(Ljava/util/UUID;Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattCharacteristic; = GetCharacter(Java.Util.UUID, Java.Util.UUID)
  onComplete()V = OnComplete()
  onError(ILjava/lang/String;)V = OnError(int, string)
  onStart()V = OnStart()
  setBluetoothGatt(Landroid/bluetooth/BluetoothGatt;)V = SetBluetoothGatt(Android.Bluetooth.BluetoothGatt)
  setDiscoverListener(Lcom/vivalnk/sdk/common/ble/connect/request/DiscoverService$DiscoverServiceListener;)V = SetDiscoverListener(Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DiscoverService.IDiscoverServiceListener)
com/vivalnk/sdk/common/ble/connect/BleIODispatcher = Com.Vivalnk.Sdk.Common.Ble.Connect.BleIODispatcher
  checkRuntime()V = CheckRuntime()
  clearAllRequest()V = ClearAllRequest()
  excute(Lcom/vivalnk/sdk/common/ble/connect/base/BaseIORequest;)V = Excute(Com.Vivalnk.Sdk.Common.Ble.Connect.Base.BaseIORequest)
  handleMessage(Landroid/os/Message;)Z = HandleMessage(Android.OS.Message)
  newInstance(Landroid/content/Context;Landroid/os/Handler;Ljava/lang/String;)Lcom/vivalnk/sdk/common/ble/connect/BleIODispatcher; = NewInstance(Android.Content.Context, Android.OS.Handler, string)
  onRequestFinsh(Lcom/vivalnk/sdk/common/ble/connect/base/BaseIORequest;)V = OnRequestFinsh(Com.Vivalnk.Sdk.Common.Ble.Connect.Base.BaseIORequest)
  setConnectMaster(Lcom/vivalnk/sdk/common/ble/connect/base/BaseGattIOOperation;)V = SetConnectMaster(Com.Vivalnk.Sdk.Common.Ble.Connect.Base.BaseGattIOOperation)
com/vivalnk/sdk/common/ble/connect/ConnectEventPoster = Com.Vivalnk.Sdk.Common.Ble.Connect.ConnectEventPoster
  <init>()V = .ctor()
  onConnected(Ljava/lang/String;)V = OnConnected(string)
  onDisconnected(Ljava/lang/String;Z)V = OnDisconnected(string, bool)
  onError(Ljava/lang/String;ILjava/lang/String;)V = OnError(string, int, string)
  onRetryConnect(Ljava/lang/String;IIJ)V = OnRetryConnect(string, int, int, long)
  onServiceReady(Ljava/lang/String;)V = OnServiceReady(string)
  onStart(Ljava/lang/String;)V = OnStart(string)
com/vivalnk/sdk/common/ble/connect/event/base/Event = Com.Vivalnk.Sdk.Common.Ble.Connect.Event.Base.Event
  <init>()V = .ctor()
  getKey()Ljava/lang/String; = Key
  setKey(Ljava/lang/String;)V = Key
  addData(Ljava/lang/String;Ljava/lang/Object;)V = AddData(string, Java.Lang.Object)
  getData(Ljava/lang/String;)Ljava/lang/Object; = GetData(string)
com/vivalnk/sdk/common/ble/connect/event/base/EventKey = Com.Vivalnk.Sdk.Common.Ble.Connect.Event.Base.EventKey
  <init>()V = .ctor()
  EVENT_BT_STATE = EventBtState
  EVENT_DEVICE_BOND = EventDeviceBond
  EVENT_DEVICE_CONNECT = EventDeviceConnect
  EVENT_DEVICE_REQUEST_PAIR = EventDeviceRequestPair
com/vivalnk/sdk/common/ble/connect/event/BluetoothStateEvent = Com.Vivalnk.Sdk.Common.Ble.Connect.Event.BluetoothStateEvent
  <init>(I)V = .ctor(int)
  state = State
com/vivalnk/sdk/common/ble/connect/event/BondEvent = Com.Vivalnk.Sdk.Common.Ble.Connect.Event.BondEvent
  <init>()V = .ctor()
com/vivalnk/sdk/common/ble/connect/event/CharacteristicChangedEvent = Com.Vivalnk.Sdk.Common.Ble.Connect.Event.CharacteristicChangedEvent
  <init>()V = .ctor()
  characteristic = Characteristic
  data = Data
  device = Device
com/vivalnk/sdk/common/ble/connect/event/OTAEvent = Com.Vivalnk.Sdk.Common.Ble.Connect.Event.OTAEvent
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  event = Event
  mac = Mac
  OTA_CANCEL = OtaCancel
  OTA_COMPLETE = OtaComplete
  OTA_ERROR = OtaError
  OTA_START = OtaStart
  time = Time
com/vivalnk/sdk/common/ble/connect/event/PairRequestEvent = Com.Vivalnk.Sdk.Common.Ble.Connect.Event.PairRequestEvent
  <init>()V = .ctor()
com/vivalnk/sdk/common/ble/connect/listener/IBleDispatcher = Com.Vivalnk.Sdk.Common.Ble.Connect.Listener.IBleDispatcher
  onRequestFinsh(Lcom/vivalnk/sdk/common/ble/connect/base/BaseIORequest;)V = OnRequestFinsh(Com.Vivalnk.Sdk.Common.Ble.Connect.Base.BaseIORequest)
com/vivalnk/sdk/common/ble/connect/listener/IBleRequest = Com.Vivalnk.Sdk.Common.Ble.Connect.Listener.IBleRequest
  cancel()V = Cancel()
  process(Lcom/vivalnk/sdk/common/ble/connect/listener/IBleDispatcher;)V = Process(Com.Vivalnk.Sdk.Common.Ble.Connect.Listener.IBleDispatcher)
com/vivalnk/sdk/common/ble/connect/listener/IDispatchCallback = Com.Vivalnk.Sdk.Common.Ble.Connect.Listener.IDispatchCallback
  finishRequest()V = FinishRequest()
  onError(ILjava/lang/String;)V = OnError(int, string)
  onStart()V = OnStart()
com/vivalnk/sdk/common/ble/connect/receiver/BluetoothStateReceiver = Com.Vivalnk.Sdk.Common.Ble.Connect.Receiver.BluetoothStateReceiver
  <init>()V = .ctor()
  delegate = Delegate
  TAG = Tag
  onReceive(Landroid/content/Context;Landroid/content/Intent;)V = OnReceive(Android.Content.Context, Android.Content.Intent)
  regist(Landroid/content/BroadcastReceiver;)V = Regist(Android.Content.BroadcastReceiver)
  unregist()V = Unregist()
com/vivalnk/sdk/common/ble/connect/receiver/BondStateReceiver = Com.Vivalnk.Sdk.Common.Ble.Connect.Receiver.BondStateReceiver
  <init>()V = .ctor()
  onReceive(Landroid/content/Context;Landroid/content/Intent;)V = OnReceive(Android.Content.Context, Android.Content.Intent)
com/vivalnk/sdk/common/ble/connect/request/CharacterRead = Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterRead
  <init>(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/base/IORequestOptions;Lcom/vivalnk/sdk/common/ble/connect/request/CharacterRead$CharacterReadListener;Ljava/util/UUID;Ljava/util/UUID;)V = .ctor(string, Com.Vivalnk.Sdk.Common.Ble.Connect.Base.IORequestOptions, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterRead.ICharacterReadListener, Java.Util.UUID, Java.Util.UUID)
  getRequestName()Ljava/lang/String; = RequestName
  process()V = Process()
com/vivalnk/sdk/common/ble/connect/request/CharacterWrite = Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterWrite
  <init>(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/base/IORequestOptions;Lcom/vivalnk/sdk/common/ble/connect/request/CharacterWrite$CharacterWriteListener;Ljava/util/UUID;Ljava/util/UUID;[B)V = .ctor(string, Com.Vivalnk.Sdk.Common.Ble.Connect.Base.IORequestOptions, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterWrite.ICharacterWriteListener, Java.Util.UUID, Java.Util.UUID, byte[])
  getRequestName()Ljava/lang/String; = RequestName
  process()V = Process()
com/vivalnk/sdk/common/ble/connect/request/CharacterWriteReliable = Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterWriteReliable
  <init>(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/base/IORequestOptions;Lcom/vivalnk/sdk/common/ble/connect/request/CharacterWriteReliable$CharacterWriteReliableListener;Ljava/util/UUID;Ljava/util/UUID;[B)V = .ctor(string, Com.Vivalnk.Sdk.Common.Ble.Connect.Base.IORequestOptions, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterWriteReliable.ICharacterWriteReliableListener, Java.Util.UUID, Java.Util.UUID, byte[])
  <init>(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/request/CharacterWriteReliable$CharacterWriteReliableListener;Ljava/util/UUID;Ljava/util/UUID;[B)V = .ctor(string, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.CharacterWriteReliable.ICharacterWriteReliableListener, Java.Util.UUID, Java.Util.UUID, byte[])
  getRequestName()Ljava/lang/String; = RequestName
  process()V = Process()
com/vivalnk/sdk/common/ble/connect/request/DescriptorRead = Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DescriptorRead
  <init>(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/base/IORequestOptions;Lcom/vivalnk/sdk/common/ble/connect/request/DescriptorRead$DescriptorReadListener;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/UUID;)V = .ctor(string, Com.Vivalnk.Sdk.Common.Ble.Connect.Base.IORequestOptions, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DescriptorRead.IDescriptorReadListener, Java.Util.UUID, Java.Util.UUID, Java.Util.UUID)
  getRequestName()Ljava/lang/String; = RequestName
  process()V = Process()
com/vivalnk/sdk/common/ble/connect/request/DescriptorWrite = Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DescriptorWrite
  <init>(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/base/IORequestOptions;Lcom/vivalnk/sdk/common/ble/connect/request/DescriptorWrite$DescriptorWriteListener;Ljava/util/UUID;Ljava/util/UUID;Ljava/util/UUID;[B)V = .ctor(string, Com.Vivalnk.Sdk.Common.Ble.Connect.Base.IORequestOptions, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DescriptorWrite.IDescriptorWriteListener, Java.Util.UUID, Java.Util.UUID, Java.Util.UUID, byte[])
  getRequestName()Ljava/lang/String; = RequestName
  process()V = Process()
com/vivalnk/sdk/common/ble/connect/request/DiscoverService = Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DiscoverService
  <init>(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/base/IORequestOptions;Lcom/vivalnk/sdk/common/ble/connect/request/DiscoverService$DiscoverServiceListener;)V = .ctor(string, Com.Vivalnk.Sdk.Common.Ble.Connect.Base.IORequestOptions, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.DiscoverService.IDiscoverServiceListener)
  getRequestName()Ljava/lang/String; = RequestName
  process()V = Process()
  setOptions(Lcom/vivalnk/sdk/common/ble/connect/BleConnectOptions;)V = SetOptions(Com.Vivalnk.Sdk.Common.Ble.Connect.BleConnectOptions)
com/vivalnk/sdk/common/ble/connect/request/IndicateRequest = Com.Vivalnk.Sdk.Common.Ble.Connect.Request.IndicateRequest
  <init>(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/base/IORequestOptions;Lcom/vivalnk/sdk/common/ble/connect/request/IndicateRequest$IndicateListener;Ljava/util/UUID;Ljava/util/UUID;Z)V = .ctor(string, Com.Vivalnk.Sdk.Common.Ble.Connect.Base.IORequestOptions, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.IndicateRequest.IIndicateListener, Java.Util.UUID, Java.Util.UUID, bool)
  getRequestName()Ljava/lang/String; = RequestName
  process()V = Process()
com/vivalnk/sdk/common/ble/connect/request/MtuRequest = Com.Vivalnk.Sdk.Common.Ble.Connect.Request.MtuRequest
  <init>(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/base/IORequestOptions;Lcom/vivalnk/sdk/common/ble/connect/request/MtuRequest$MtuListener;I)V = .ctor(string, Com.Vivalnk.Sdk.Common.Ble.Connect.Base.IORequestOptions, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.MtuRequest.IMtuListener, int)
  getRequestName()Ljava/lang/String; = RequestName
  process()V = Process()
com/vivalnk/sdk/common/ble/connect/request/NotifyRequest = Com.Vivalnk.Sdk.Common.Ble.Connect.Request.NotifyRequest
  <init>(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/base/IORequestOptions;Lcom/vivalnk/sdk/common/ble/connect/request/NotifyRequest$NotifyChangeListener;Ljava/util/UUID;Ljava/util/UUID;Z)V = .ctor(string, Com.Vivalnk.Sdk.Common.Ble.Connect.Base.IORequestOptions, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.NotifyRequest.INotifyChangeListener, Java.Util.UUID, Java.Util.UUID, bool)
  getRequestName()Ljava/lang/String; = RequestName
  process()V = Process()
com/vivalnk/sdk/common/ble/connect/request/ReadRemoteRssi = Com.Vivalnk.Sdk.Common.Ble.Connect.Request.ReadRemoteRssi
  <init>(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/base/IORequestOptions;Lcom/vivalnk/sdk/common/ble/connect/request/ReadRemoteRssi$ReadRssiListener;)V = .ctor(string, Com.Vivalnk.Sdk.Common.Ble.Connect.Base.IORequestOptions, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.ReadRemoteRssi.IReadRssiListener)
  getRequestName()Ljava/lang/String; = RequestName
  process()V = Process()
com/vivalnk/sdk/common/ble/connect/request/RefreshCache = Com.Vivalnk.Sdk.Common.Ble.Connect.Request.RefreshCache
  <init>(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/base/IORequestOptions;Lcom/vivalnk/sdk/common/ble/connect/request/RefreshCache$RefreshCacheListener;)V = .ctor(string, Com.Vivalnk.Sdk.Common.Ble.Connect.Base.IORequestOptions, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.RefreshCache.IRefreshCacheListener)
  <init>(Ljava/lang/String;Lcom/vivalnk/sdk/common/ble/connect/request/RefreshCache$RefreshCacheListener;)V = .ctor(string, Com.Vivalnk.Sdk.Common.Ble.Connect.Request.RefreshCache.IRefreshCacheListener)
  getRequestName()Ljava/lang/String; = RequestName
  process()V = Process()
com/vivalnk/sdk/common/ble/exception/BleCode = Com.Vivalnk.Sdk.Common.Ble.Exception.IBleCode
  BLUETOOTH_CANNOT_CANNOT_WRITE = BluetoothCannotCannotWrite
  BLUETOOTH_CANNOT_GET_GATT_SERVICE = BluetoothCannotGetGattService
  BLUETOOTH_CANNOT_GET_INFO_SERVICE = BluetoothCannotGetInfoService
  BLUETOOTH_CANNOT_OPEN_GATT = BluetoothCannotOpenGatt
  BLUETOOTH_CANNOT_START_SCAN = BluetoothCannotStartScan
  BLUETOOTH_CONNECT_ERROR = BluetoothConnectError
  BLUETOOTH_CONNECT_TIMEOUT = BluetoothConnectTimeout
  BLUETOOTH_CONNECT_USER_CANCEL_BOND = BluetoothConnectUserCancelBond
  BLUETOOTH_NOT_AVAILABLE = BluetoothNotAvailable
  BLUETOOTH_NOT_ENABLED = BluetoothNotEnabled
  CHARACTERISTIC_WRITE_EXCEPTION = CharacteristicWriteException
  LOCATION_NOT_ENABLED = LocationNotEnabled
  NO_BLUETOOTH_ADMIN_PERMISSION = NoBluetoothAdminPermission
  NO_BLUETOOTH_PERMISSION = NoBluetoothPermission
  NO_LOCATION_PERMISSION = NoLocationPermission
  NO_SDCARD_PERMISSION = NoSdcardPermission
  NOT_SUPPORT_BLE = NotSupportBle
  REQUEST_CANCELED = RequestCanceled
  REQUEST_EXCEPTION = RequestException
  REQUEST_FAILED = RequestFailed
  REQUEST_FAILED_ALREADY_CONNECTED = RequestFailedAlreadyConnected
  REQUEST_FAILED_DISCONNECTED = RequestFailedDisconnected
  REQUEST_MTU_LOWAPI_EXCEPTION = RequestMtuLowapiException
  REQUEST_OVERFLOW = RequestOverflow
  REQUEST_SUCCESS = RequestSuccess
  REQUEST_TIMEDOUT = RequestTimedout
  RESULT_OK = ResultOk
  SDCARD_NOT_AVAILABLE = SdcardNotAvailable
com/vivalnk/sdk/common/ble/exception/BleException = Com.Vivalnk.Sdk.Common.Ble.Exception.BleException
  <init>(ILjava/lang/String;)V = .ctor(int, string)
com/vivalnk/sdk/common/ble/listener/BleListener = Com.Vivalnk.Sdk.Common.Ble.Listener.IBleListener
com/vivalnk/sdk/common/ble/listener/BluetoothStateListener = Com.Vivalnk.Sdk.Common.Ble.Listener.IBluetoothStateListener
  onBlutoothClose()V = OnBlutoothClose()
  onBlutoothOpen()V = OnBlutoothOpen()
com/vivalnk/sdk/common/ble/model/BleGattCharacter = Com.Vivalnk.Sdk.Common.Ble.Model.BleGattCharacter
  <init>(Landroid/bluetooth/BluetoothGattCharacteristic;)V = .ctor(Android.Bluetooth.BluetoothGattCharacteristic)
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  CREATOR = Creator
  getDescriptors()Ljava/util/List; = Descriptors
  setDescriptors(Ljava/util/List;)V = Descriptors
  getPermissions()I = Permissions
  setPermissions(I)V = Permissions
  getProperty()I = Property
  setProperty(I)V = Property
  getUuid()Ljava/util/UUID; = Uuid
  describeContents()I = DescribeContents()
  getmValue()[B = GetmValue()
  setmValue([B)V = SetmValue(byte[])
  setUuid(Landroid/os/ParcelUuid;)V = SetUuid(Android.OS.ParcelUuid)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/vivalnk/sdk/common/ble/model/BleGattDescriptor = Com.Vivalnk.Sdk.Common.Ble.Model.BleGattDescriptor
  <init>(Landroid/bluetooth/BluetoothGattDescriptor;)V = .ctor(Android.Bluetooth.BluetoothGattDescriptor)
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  CREATOR = Creator
  describeContents()I = DescribeContents()
  getmPermissions()I = GetmPermissions()
  getmUuid()Landroid/os/ParcelUuid; = GetmUuid()
  getmValue()[B = GetmValue()
  setmPermissions(I)V = SetmPermissions(int)
  setmUuid(Landroid/os/ParcelUuid;)V = SetmUuid(Android.OS.ParcelUuid)
  setmValue([B)V = SetmValue(byte[])
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/vivalnk/sdk/common/ble/model/BleGattProfile = Com.Vivalnk.Sdk.Common.Ble.Model.BleGattProfile
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  <init>(Ljava/util/Map;)V = .ctor(System.Collections.Generic.IDictionary<Java.Util.UUID, System.Collections.Generic.IDictionary<Java.Util.UUID, Android.Bluetooth.BluetoothGattCharacteristic>>)
  CREATOR = Creator
  getServices()Ljava/util/List; = Services
  addServices(Ljava/util/List;)V = AddServices(System.Collections.Generic.IList<Com.Vivalnk.Sdk.Common.Ble.Model.BleGattService>)
  containsCharacter(Ljava/util/UUID;Ljava/util/UUID;)Z = ContainsCharacter(Java.Util.UUID, Java.Util.UUID)
  describeContents()I = DescribeContents()
  getService(Ljava/util/UUID;)Lcom/vivalnk/sdk/common/ble/model/BleGattService; = GetService(Java.Util.UUID)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/vivalnk/sdk/common/ble/model/BleGattService = Com.Vivalnk.Sdk.Common.Ble.Model.BleGattService
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  <init>(Ljava/util/UUID;Ljava/util/Map;)V = .ctor(Java.Util.UUID, System.Collections.Generic.IDictionary<Java.Util.UUID, Android.Bluetooth.BluetoothGattCharacteristic>)
  CREATOR = Creator
  getCharacters()Ljava/util/List; = Characters
  getUUID()Ljava/util/UUID; = UUID
  compareTo(Ljava/lang/Object;)I = CompareTo(Java.Lang.Object)
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/vivalnk/sdk/common/ble/poster/AbsPoster = Com.Vivalnk.Sdk.Common.Ble.Poster.AbsPoster
  <init>()V = .ctor()
  callbackList = CallbackList
  handler = Handler
  getCallbackList()Ljava/util/Set; = CallbackList
  registCallback(Ljava/lang/Object;)V = RegistCallback(Java.Lang.Object)
  setHandler(Landroid/os/Handler;)V = SetHandler(Android.OS.Handler)
  unregistCallback(Ljava/lang/Object;)V = UnregistCallback(Java.Lang.Object)
  unregistCallbackAll()V = UnregistCallbackAll()
com/vivalnk/sdk/common/ble/poster/Poster = Com.Vivalnk.Sdk.Common.Ble.Poster.IPoster
  registCallback(Ljava/lang/Object;)V = RegistCallback(Java.Lang.Object)
  setHandler(Landroid/os/Handler;)V = SetHandler(Android.OS.Handler)
  unregistCallback(Ljava/lang/Object;)V = UnregistCallback(Java.Lang.Object)
  unregistCallbackAll()V = UnregistCallbackAll()
com/vivalnk/sdk/common/ble/scan/BleScanListener = Com.Vivalnk.Sdk.Common.Ble.Scan.IBleScanListener
com/vivalnk/sdk/common/ble/scan/BleScanManager = Com.Vivalnk.Sdk.Common.Ble.Scan.BleScanManager
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  TAG = Tag
  destroy()V = Destroy()
  handleMessage(Landroid/os/Message;)Z = HandleMessage(Android.OS.Message)
  onBluetoothStateChange(Lcom/vivalnk/sdk/common/ble/connect/event/BluetoothStateEvent;)V = OnBluetoothStateChange(Com.Vivalnk.Sdk.Common.Ble.Connect.Event.BluetoothStateEvent)
  startScan(Lcom/vivalnk/sdk/common/ble/scan/ScanOptions;Lcom/vivalnk/sdk/common/ble/scan/BleScanListener;)V = StartScan(Com.Vivalnk.Sdk.Common.Ble.Scan.ScanOptions, Com.Vivalnk.Sdk.Common.Ble.Scan.IBleScanListener)
  stopScanning()V = StopScanning()
com/vivalnk/sdk/common/ble/scan/IScanOperation = Com.Vivalnk.Sdk.Common.Ble.Scan.IScanOperation
  startScan(Lcom/vivalnk/sdk/common/ble/scan/ScanOptions;Lcom/vivalnk/sdk/common/ble/scan/BleScanListener;)V = StartScan(Com.Vivalnk.Sdk.Common.Ble.Scan.ScanOptions, Com.Vivalnk.Sdk.Common.Ble.Scan.IBleScanListener)
  stopScanning()V = StopScanning()
com/vivalnk/sdk/common/ble/scan/ScanOptions = Com.Vivalnk.Sdk.Common.Ble.Scan.ScanOptions
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  CREATOR = Creator
  getScanTimeout()J = ScanTimeout
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/vivalnk/sdk/common/ble/utils/BluetoothLog = Com.Vivalnk.Sdk.Common.Ble.Utils.BluetoothLog
  <init>()V = .ctor()
  d(Ljava/lang/String;)V = D(string)
  e(Ljava/lang/String;)V = E(string)
  e(Ljava/lang/Throwable;)V = E(Java.Lang.Throwable)
  i(Ljava/lang/String;)V = I(string)
  v(Ljava/lang/String;)V = V(string)
  w(Ljava/lang/String;)V = W(string)
  w(Ljava/lang/Throwable;)V = W(Java.Lang.Throwable)
com/vivalnk/sdk/common/ble/utils/BluetoothUtils = Com.Vivalnk.Sdk.Common.Ble.Utils.BluetoothUtils
  <init>()V = .ctor()
  getBluetoothAdapter()Landroid/bluetooth/BluetoothAdapter; = BluetoothAdapter
  getBluetoothState()I = BluetoothState
  getBondedBluetoothClassicDevices()Ljava/util/List; = BondedBluetoothClassicDevices
  getContext()Landroid/content/Context; = Context
  isBluetoothEnabled()Z = IsBluetoothEnabled
  checkMainThread()Z = CheckMainThread()
  closeBluetooth()Z = CloseBluetooth()
  creatBond(Ljava/lang/String;)Z = CreatBond(string)
  getBluetoothManager(Landroid/content/Context;)Landroid/bluetooth/BluetoothManager; = GetBluetoothManager(Android.Content.Context)
  getBondState(Landroid/content/Context;Ljava/lang/String;)I = GetBondState(Android.Content.Context, string)
  getConnectedBluetoothLeDevices(Landroid/content/Context;)Ljava/util/List; = GetConnectedBluetoothLeDevices(Android.Content.Context)
  getConnectStatus(Landroid/content/Context;Ljava/lang/String;)I = GetConnectStatus(Android.Content.Context, string)
  getDeviceConnectState(Landroid/content/Context;Ljava/lang/String;)I = GetDeviceConnectState(Android.Content.Context, string)
  getRemoteDevice(Ljava/lang/String;)Landroid/bluetooth/BluetoothDevice; = GetRemoteDevice(string)
  init(Landroid/content/Context;)V = Init(Android.Content.Context)
  isBleSupported(Landroid/content/Context;)Z = IsBleSupported(Android.Content.Context)
  isCharacteristicIndicatable(Landroid/bluetooth/BluetoothGattCharacteristic;)Z = IsCharacteristicIndicatable(Android.Bluetooth.BluetoothGattCharacteristic)
  isCharacteristicNoRspWritable(Landroid/bluetooth/BluetoothGattCharacteristic;)Z = IsCharacteristicNoRspWritable(Android.Bluetooth.BluetoothGattCharacteristic)
  isCharacteristicNotifyable(Landroid/bluetooth/BluetoothGattCharacteristic;)Z = IsCharacteristicNotifyable(Android.Bluetooth.BluetoothGattCharacteristic)
  isCharacteristicReadable(Landroid/bluetooth/BluetoothGattCharacteristic;)Z = IsCharacteristicReadable(Android.Bluetooth.BluetoothGattCharacteristic)
  isCharacteristicWritable(Landroid/bluetooth/BluetoothGattCharacteristic;)Z = IsCharacteristicWritable(Android.Bluetooth.BluetoothGattCharacteristic)
  isDeviceBonded(Ljava/lang/String;)Z = IsDeviceBonded(string)
  isDeviceConnected(Landroid/content/Context;Ljava/lang/String;)Z = IsDeviceConnected(Android.Content.Context, string)
  openBluetooth()Z = OpenBluetooth()
  refreshGattCache(Landroid/bluetooth/BluetoothGatt;)Z = RefreshGattCache(Android.Bluetooth.BluetoothGatt)
  registerReceiver(Landroid/content/Context;Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)V = RegisterReceiver(Android.Content.Context, Android.Content.BroadcastReceiver, Android.Content.IntentFilter)
  removeBond(Ljava/lang/String;)V = RemoveBond(string)
  sendBroadcast(Landroid/content/Context;Landroid/content/Intent;)V = SendBroadcast(Android.Content.Context, Android.Content.Intent)
  sendBroadcast(Landroid/content/Context;Ljava/lang/String;)V = SendBroadcast(Android.Content.Context, string)
  unregisterReceiver(Landroid/content/Context;Landroid/content/BroadcastReceiver;)V = UnregisterReceiver(Android.Content.Context, Android.Content.BroadcastReceiver)
com/vivalnk/sdk/common/ble/utils/CheckCodeUtils = Com.Vivalnk.Sdk.Common.Ble.Utils.CheckCodeUtils
  <init>()V = .ctor()
  hasBluetoothAdminPermission(I)Z = HasBluetoothAdminPermission(int)
  hasBluetoothPermission(I)Z = HasBluetoothPermission(int)
  hasLocationPermission(I)Z = HasLocationPermission(int)
  hasSDCardPermission(I)Z = HasSDCardPermission(int)
  isBluetoothAvailable(I)Z = IsBluetoothAvailable(int)
  isBluetoothEnable(I)Z = IsBluetoothEnable(int)
  isLocationEnable(I)Z = IsLocationEnable(int)
  isSDCardAvailable(I)Z = IsSDCardAvailable(int)
  isSupportBLE(I)Z = IsSupportBLE(int)
com/vivalnk/sdk/common/ble/utils/SystemUtils = Com.Vivalnk.Sdk.Common.Ble.Utils.SystemUtils
  <init>()V = .ctor()
  getDeviceBrand()Ljava/lang/String; = DeviceBrand
  getSystemLanguage()Ljava/lang/String; = SystemLanguage
  getSystemModel()Ljava/lang/String; = SystemModel
  getSystemVersion()Ljava/lang/String; = SystemVersion
  getSystemLanguageList()[Ljava/util/Locale; = GetSystemLanguageList()
com/vivalnk/sdk/common/BuildConfig = Com.Vivalnk.Sdk.Common.BuildConfig
  <init>()V = .ctor()
  APPLICATION_ID = ApplicationId
  BUILD_TYPE = BuildType
  DEBUG = Debug
  FLAVOR = Flavor
  LIBRARY_PACKAGE_NAME = LibraryPackageName
  VERSION_CODE = VersionCode
  VERSION_NAME = VersionName
com/vivalnk/sdk/common/eventbus/android/AndroidLogger = Com.Vivalnk.Sdk.Common.Eventbus.Android.AndroidLogger
  <init>(Ljava/lang/String;)V = .ctor(string)
  isAndroidLogAvailable()Z = IsAndroidLogAvailable
  log(Ljava/util/logging/Level;Ljava/lang/String;)V = Log(Java.Util.Logging.Level, string)
  log(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V = Log(Java.Util.Logging.Level, string, Java.Lang.Throwable)
com/vivalnk/sdk/common/eventbus/EventBus = Com.Vivalnk.Sdk.Common.Eventbus.EventBus
  <init>()V = .ctor()
  TAG = Tag
  getDefault()Lcom/vivalnk/sdk/common/eventbus/EventBus; = Default
  getLogger()Lcom/vivalnk/sdk/common/eventbus/Logger; = Logger
  builder()Lcom/vivalnk/sdk/common/eventbus/EventBusBuilder; = Builder()
  cancelEventDelivery(Ljava/lang/Object;)V = CancelEventDelivery(Java.Lang.Object)
  clearCaches()V = ClearCaches()
  getStickyEvent(Ljava/lang/Class;)Ljava/lang/Object; = GetStickyEvent(Java.Lang.Class)
  hasSubscriberForEvent(Ljava/lang/Class;)Z = HasSubscriberForEvent(Java.Lang.Class)
  isRegistered(Ljava/lang/Object;)Z = IsRegistered(Java.Lang.Object)
  post(Ljava/lang/Object;)V = Post(Java.Lang.Object)
  postSticky(Ljava/lang/Object;)V = PostSticky(Java.Lang.Object)
  register(Ljava/lang/Object;)V = Register(Java.Lang.Object)
  removeAllStickyEvents()V = RemoveAllStickyEvents()
  removeStickyEvent(Ljava/lang/Class;)Ljava/lang/Object; = RemoveStickyEvent(Java.Lang.Class)
  removeStickyEvent(Ljava/lang/Object;)Z = RemoveStickyEvent(Java.Lang.Object)
  unregister(Ljava/lang/Object;)V = Unregister(Java.Lang.Object)
com/vivalnk/sdk/common/eventbus/EventBusBuilder = Com.Vivalnk.Sdk.Common.Eventbus.EventBusBuilder
  addIndex(Lcom/vivalnk/sdk/common/eventbus/meta/SubscriberInfoIndex;)Lcom/vivalnk/sdk/common/eventbus/EventBusBuilder; = AddIndex(Com.Vivalnk.Sdk.Common.Eventbus.Meta.ISubscriberInfoIndex)
  build()Lcom/vivalnk/sdk/common/eventbus/EventBus; = Build()
  eventInheritance(Z)Lcom/vivalnk/sdk/common/eventbus/EventBusBuilder; = EventInheritance(bool)
  executorService(Ljava/util/concurrent/ExecutorService;)Lcom/vivalnk/sdk/common/eventbus/EventBusBuilder; = ExecutorService(Java.Util.Concurrent.IExecutorService)
  ignoreGeneratedIndex(Z)Lcom/vivalnk/sdk/common/eventbus/EventBusBuilder; = IgnoreGeneratedIndex(bool)
  installDefaultEventBus()Lcom/vivalnk/sdk/common/eventbus/EventBus; = InstallDefaultEventBus()
  logger(Lcom/vivalnk/sdk/common/eventbus/Logger;)Lcom/vivalnk/sdk/common/eventbus/EventBusBuilder; = Logger(Com.Vivalnk.Sdk.Common.Eventbus.ILogger)
  logNoSubscriberMessages(Z)Lcom/vivalnk/sdk/common/eventbus/EventBusBuilder; = LogNoSubscriberMessages(bool)
  logSubscriberExceptions(Z)Lcom/vivalnk/sdk/common/eventbus/EventBusBuilder; = LogSubscriberExceptions(bool)
  sendNoSubscriberEvent(Z)Lcom/vivalnk/sdk/common/eventbus/EventBusBuilder; = SendNoSubscriberEvent(bool)
  sendSubscriberExceptionEvent(Z)Lcom/vivalnk/sdk/common/eventbus/EventBusBuilder; = SendSubscriberExceptionEvent(bool)
  skipMethodVerificationFor(Ljava/lang/Class;)Lcom/vivalnk/sdk/common/eventbus/EventBusBuilder; = SkipMethodVerificationFor(Java.Lang.Class)
  strictMethodVerification(Z)Lcom/vivalnk/sdk/common/eventbus/EventBusBuilder; = StrictMethodVerification(bool)
  throwSubscriberException(Z)Lcom/vivalnk/sdk/common/eventbus/EventBusBuilder; = ThrowSubscriberException(bool)
com/vivalnk/sdk/common/eventbus/EventBusException = Com.Vivalnk.Sdk.Common.Eventbus.EventBusException
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
com/vivalnk/sdk/common/eventbus/HandlerPoster = Com.Vivalnk.Sdk.Common.Eventbus.HandlerPoster
  <init>(Lcom/vivalnk/sdk/common/eventbus/EventBus;Landroid/os/Looper;I)V = .ctor(Com.Vivalnk.Sdk.Common.Eventbus.EventBus, Android.OS.Looper, int)
com/vivalnk/sdk/common/eventbus/Logger = Com.Vivalnk.Sdk.Common.Eventbus.ILogger
  log(Ljava/util/logging/Level;Ljava/lang/String;)V = Log(Java.Util.Logging.Level, string)
  log(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V = Log(Java.Util.Logging.Level, string, Java.Lang.Throwable)
com/vivalnk/sdk/common/eventbus/MainThreadSupport = Com.Vivalnk.Sdk.Common.Eventbus.IMainThreadSupport
  isMainThread()Z = IsMainThread
  createPoster(Lcom/vivalnk/sdk/common/eventbus/EventBus;)Lcom/vivalnk/sdk/common/eventbus/Poster; = CreatePoster(Com.Vivalnk.Sdk.Common.Eventbus.EventBus)
com/vivalnk/sdk/common/eventbus/meta/AbstractSubscriberInfo = Com.Vivalnk.Sdk.Common.Eventbus.Meta.AbstractSubscriberInfo
  <init>(Ljava/lang/Class;Ljava/lang/Class;Z)V = .ctor(Java.Lang.Class, Java.Lang.Class, bool)
  getSubscriberClass()Ljava/lang/Class; = SubscriberClass
  getSuperSubscriberInfo()Lcom/vivalnk/sdk/common/eventbus/meta/SubscriberInfo; = SuperSubscriberInfo
  createSubscriberMethod(Ljava/lang/String;Ljava/lang/Class;)Lcom/vivalnk/sdk/common/eventbus/SubscriberMethod; = CreateSubscriberMethod(string, Java.Lang.Class)
  createSubscriberMethod(Ljava/lang/String;Ljava/lang/Class;Lcom/vivalnk/sdk/common/eventbus/ThreadMode;)Lcom/vivalnk/sdk/common/eventbus/SubscriberMethod; = CreateSubscriberMethod(string, Java.Lang.Class, Com.Vivalnk.Sdk.Common.Eventbus.ThreadMode)
  createSubscriberMethod(Ljava/lang/String;Ljava/lang/Class;Lcom/vivalnk/sdk/common/eventbus/ThreadMode;IZ)Lcom/vivalnk/sdk/common/eventbus/SubscriberMethod; = CreateSubscriberMethod(string, Java.Lang.Class, Com.Vivalnk.Sdk.Common.Eventbus.ThreadMode, int, bool)
  shouldCheckSuperclass()Z = ShouldCheckSuperclass()
com/vivalnk/sdk/common/eventbus/meta/SimpleSubscriberInfo = Com.Vivalnk.Sdk.Common.Eventbus.Meta.SimpleSubscriberInfo
  <init>(Ljava/lang/Class;Z[Lcom/vivalnk/sdk/common/eventbus/meta/SubscriberMethodInfo;)V = .ctor(Java.Lang.Class, bool, Com.Vivalnk.Sdk.Common.Eventbus.Meta.SubscriberMethodInfo[])
  getSubscriberMethods()[Lcom/vivalnk/sdk/common/eventbus/SubscriberMethod; = GetSubscriberMethods()
com/vivalnk/sdk/common/eventbus/meta/SubscriberInfo = Com.Vivalnk.Sdk.Common.Eventbus.Meta.ISubscriberInfo
  getSubscriberClass()Ljava/lang/Class; = SubscriberClass
  getSuperSubscriberInfo()Lcom/vivalnk/sdk/common/eventbus/meta/SubscriberInfo; = SuperSubscriberInfo
  getSubscriberMethods()[Lcom/vivalnk/sdk/common/eventbus/SubscriberMethod; = GetSubscriberMethods()
  shouldCheckSuperclass()Z = ShouldCheckSuperclass()
com/vivalnk/sdk/common/eventbus/meta/SubscriberInfoIndex = Com.Vivalnk.Sdk.Common.Eventbus.Meta.ISubscriberInfoIndex
  getSubscriberInfo(Ljava/lang/Class;)Lcom/vivalnk/sdk/common/eventbus/meta/SubscriberInfo; = GetSubscriberInfo(Java.Lang.Class)
com/vivalnk/sdk/common/eventbus/meta/SubscriberMethodInfo = Com.Vivalnk.Sdk.Common.Eventbus.Meta.SubscriberMethodInfo
  <init>(Ljava/lang/String;Ljava/lang/Class;)V = .ctor(string, Java.Lang.Class)
  <init>(Ljava/lang/String;Ljava/lang/Class;Lcom/vivalnk/sdk/common/eventbus/ThreadMode;)V = .ctor(string, Java.Lang.Class, Com.Vivalnk.Sdk.Common.Eventbus.ThreadMode)
  <init>(Ljava/lang/String;Ljava/lang/Class;Lcom/vivalnk/sdk/common/eventbus/ThreadMode;IZ)V = .ctor(string, Java.Lang.Class, Com.Vivalnk.Sdk.Common.Eventbus.ThreadMode, int, bool)
com/vivalnk/sdk/common/eventbus/NoSubscriberEvent = Com.Vivalnk.Sdk.Common.Eventbus.NoSubscriberEvent
  <init>(Lcom/vivalnk/sdk/common/eventbus/EventBus;Ljava/lang/Object;)V = .ctor(Com.Vivalnk.Sdk.Common.Eventbus.EventBus, Java.Lang.Object)
  eventBus = EventBus
  originalEvent = OriginalEvent
com/vivalnk/sdk/common/eventbus/Subscribe = Com.Vivalnk.Sdk.Common.Eventbus.ISubscribe
  priority()I = Priority()
  sticky()Z = Sticky()
  threadMode()Lcom/vivalnk/sdk/common/eventbus/ThreadMode; = ThreadMode()
com/vivalnk/sdk/common/eventbus/SubscriberExceptionEvent = Com.Vivalnk.Sdk.Common.Eventbus.SubscriberExceptionEvent
  <init>(Lcom/vivalnk/sdk/common/eventbus/EventBus;Ljava/lang/Throwable;Ljava/lang/Object;Ljava/lang/Object;)V = .ctor(Com.Vivalnk.Sdk.Common.Eventbus.EventBus, Java.Lang.Throwable, Java.Lang.Object, Java.Lang.Object)
  causingEvent = CausingEvent
  causingSubscriber = CausingSubscriber
  eventBus = EventBus
  throwable = Throwable
com/vivalnk/sdk/common/eventbus/SubscriberMethod = Com.Vivalnk.Sdk.Common.Eventbus.SubscriberMethod
  <init>(Ljava/lang/reflect/Method;Ljava/lang/Class;Lcom/vivalnk/sdk/common/eventbus/ThreadMode;IZ)V = .ctor(Java.Lang.Reflect.Method, Java.Lang.Class, Com.Vivalnk.Sdk.Common.Eventbus.ThreadMode, int, bool)
com/vivalnk/sdk/common/eventbus/ThreadMode = Com.Vivalnk.Sdk.Common.Eventbus.ThreadMode
  ASYNC = Async
  BACKGROUND = Background
  MAIN = Main
  MAIN_ORDERED = MainOrdered
  POSTING = Posting
  valueOf(Ljava/lang/String;)Lcom/vivalnk/sdk/common/eventbus/ThreadMode; = ValueOf(string)
  values()[Lcom/vivalnk/sdk/common/eventbus/ThreadMode; = Values()
com/vivalnk/sdk/common/eventbus/util/AsyncExecutor = Com.Vivalnk.Sdk.Common.Eventbus.Util.AsyncExecutor
  create()Lcom/vivalnk/sdk/common/eventbus/util/AsyncExecutor; = Create()
  execute(Lcom/vivalnk/sdk/common/eventbus/util/AsyncExecutor$RunnableEx;)V = Execute(Com.Vivalnk.Sdk.Common.Eventbus.Util.AsyncExecutor.IRunnableEx)
  builder()Lcom/vivalnk/sdk/common/eventbus/util/AsyncExecutor$Builder; = InvokeBuilder()
com/vivalnk/sdk/common/eventbus/util/ErrorDialogConfig = Com.Vivalnk.Sdk.Common.Eventbus.Util.ErrorDialogConfig
  <init>(Landroid/content/res/Resources;II)V = .ctor(Android.Content.Res.Resources, int, int)
  addMapping(Ljava/lang/Class;I)Lcom/vivalnk/sdk/common/eventbus/util/ErrorDialogConfig; = AddMapping(Java.Lang.Class, int)
  disableExceptionLogging()V = DisableExceptionLogging()
  getMessageIdForThrowable(Ljava/lang/Throwable;)I = GetMessageIdForThrowable(Java.Lang.Throwable)
  setDefaultDialogIconId(I)V = SetDefaultDialogIconId(int)
  setDefaultEventTypeOnDialogClosed(Ljava/lang/Class;)V = SetDefaultEventTypeOnDialogClosed(Java.Lang.Class)
  setEventBus(Lcom/vivalnk/sdk/common/eventbus/EventBus;)V = SetEventBus(Com.Vivalnk.Sdk.Common.Eventbus.EventBus)
  setTagForLoggingExceptions(Ljava/lang/String;)V = SetTagForLoggingExceptions(string)
com/vivalnk/sdk/common/eventbus/util/ErrorDialogFragmentFactory = Com.Vivalnk.Sdk.Common.Eventbus.Util.ErrorDialogFragmentFactory
  <init>(Lcom/vivalnk/sdk/common/eventbus/util/ErrorDialogConfig;)V = .ctor(Com.Vivalnk.Sdk.Common.Eventbus.Util.ErrorDialogConfig)
  config = Config
  createErrorFragment(Lcom/vivalnk/sdk/common/eventbus/util/ThrowableFailureEvent;Landroid/os/Bundle;)Ljava/lang/Object; = CreateErrorFragment(Com.Vivalnk.Sdk.Common.Eventbus.Util.ThrowableFailureEvent, Android.OS.Bundle)
  getMessageFor(Lcom/vivalnk/sdk/common/eventbus/util/ThrowableFailureEvent;Landroid/os/Bundle;)Ljava/lang/String; = GetMessageFor(Com.Vivalnk.Sdk.Common.Eventbus.Util.ThrowableFailureEvent, Android.OS.Bundle)
  getTitleFor(Lcom/vivalnk/sdk/common/eventbus/util/ThrowableFailureEvent;Landroid/os/Bundle;)Ljava/lang/String; = GetTitleFor(Com.Vivalnk.Sdk.Common.Eventbus.Util.ThrowableFailureEvent, Android.OS.Bundle)
  prepareErrorFragment(Lcom/vivalnk/sdk/common/eventbus/util/ThrowableFailureEvent;ZLandroid/os/Bundle;)Ljava/lang/Object; = PrepareErrorFragment(Com.Vivalnk.Sdk.Common.Eventbus.Util.ThrowableFailureEvent, bool, Android.OS.Bundle)
com/vivalnk/sdk/common/eventbus/util/ErrorDialogFragments = Com.Vivalnk.Sdk.Common.Eventbus.Util.ErrorDialogFragments
  <init>()V = .ctor()
  ERROR_DIALOG_ICON = ErrorDialogIcon
  EVENT_TYPE_ON_CLICK = EventTypeOnClick
  createDialog(Landroid/content/Context;Landroid/os/Bundle;Landroid/content/DialogInterface$OnClickListener;)Landroid/app/Dialog; = CreateDialog(Android.Content.Context, Android.OS.Bundle, Android.Content.IDialogInterfaceOnClickListener)
  handleOnClick(Landroid/content/DialogInterface;ILandroid/app/Activity;Landroid/os/Bundle;)V = HandleOnClick(Android.Content.IDialogInterface, int, Android.App.Activity, Android.OS.Bundle)
com/vivalnk/sdk/common/eventbus/util/ErrorDialogManager = Com.Vivalnk.Sdk.Common.Eventbus.Util.ErrorDialogManager
  <init>()V = .ctor()
  factory = Factory
  KEY_EVENT_TYPE_ON_CLOSE = KeyEventTypeOnClose
  KEY_FINISH_AFTER_DIALOG = KeyFinishAfterDialog
  KEY_ICON_ID = KeyIconId
  KEY_MESSAGE = KeyMessage
  KEY_TITLE = KeyTitle
  TAG_ERROR_DIALOG = TagErrorDialog
  TAG_ERROR_DIALOG_MANAGER = TagErrorDialogManager
  attachTo(Landroid/app/Activity;)V = AttachTo(Android.App.Activity)
  attachTo(Landroid/app/Activity;Z)V = AttachTo(Android.App.Activity, bool)
  attachTo(Landroid/app/Activity;ZLandroid/os/Bundle;)V = AttachTo(Android.App.Activity, bool, Android.OS.Bundle)
  attachTo(Landroid/app/Activity;Ljava/lang/Object;ZLandroid/os/Bundle;)V = AttachTo(Android.App.Activity, Java.Lang.Object, bool, Android.OS.Bundle)
  checkLogException(Lcom/vivalnk/sdk/common/eventbus/util/ThrowableFailureEvent;)V = CheckLogException(Com.Vivalnk.Sdk.Common.Eventbus.Util.ThrowableFailureEvent)
com/vivalnk/sdk/common/eventbus/util/ExceptionToResourceMapping = Com.Vivalnk.Sdk.Common.Eventbus.Util.ExceptionToResourceMapping
  <init>()V = .ctor()
  throwableToMsgIdMap = ThrowableToMsgIdMap
  addMapping(Ljava/lang/Class;I)Lcom/vivalnk/sdk/common/eventbus/util/ExceptionToResourceMapping; = AddMapping(Java.Lang.Class, int)
  mapThrowable(Ljava/lang/Throwable;)Ljava/lang/Integer; = MapThrowable(Java.Lang.Throwable)
  mapThrowableFlat(Ljava/lang/Throwable;)Ljava/lang/Integer; = MapThrowableFlat(Java.Lang.Throwable)
com/vivalnk/sdk/common/eventbus/util/HasExecutionScope = Com.Vivalnk.Sdk.Common.Eventbus.Util.IHasExecutionScope
  getExecutionScope()Ljava/lang/Object; = ExecutionScope
  setExecutionScope(Ljava/lang/Object;)V = ExecutionScope
com/vivalnk/sdk/common/eventbus/util/ThrowableFailureEvent = Com.Vivalnk.Sdk.Common.Eventbus.Util.ThrowableFailureEvent
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;Z)V = .ctor(Java.Lang.Throwable, bool)
  suppressErrorUi = SuppressErrorUi
  throwable = Throwable
  getExecutionScope()Ljava/lang/Object; = ExecutionScope
  setExecutionScope(Ljava/lang/Object;)V = ExecutionScope
  isSuppressErrorUi()Z = IsSuppressErrorUi
  getThrowable()Ljava/lang/Throwable; = Throwable
com/vivalnk/sdk/common/exception/VivalnkCrashHandler = Com.Vivalnk.Sdk.Common.Exception.VivalnkCrashHandler
  TAG = Tag
  getInstance()Lcom/vivalnk/sdk/common/exception/VivalnkCrashHandler; = Instance
  collectDeviceInfosMap()Ljava/util/Map; = CollectDeviceInfosMap()
  collectDeviceInfoString()Ljava/lang/String; = CollectDeviceInfoString()
  init(Landroid/content/Context;)V = Init(Android.Content.Context)
  putExtra(Ljava/lang/String;Ljava/lang/String;)V = PutExtra(string, string)
  uncaughtException(Ljava/lang/Thread;Ljava/lang/Throwable;)V = UncaughtException(Java.Lang.Thread, Java.Lang.Throwable)
com/vivalnk/sdk/common/excutors/AndroidExecutors = Com.Vivalnk.Sdk.Common.Excutors.AndroidExecutors
  allowCoreThreadTimeout(Ljava/util/concurrent/ThreadPoolExecutor;Z)V = AllowCoreThreadTimeout(Java.Util.Concurrent.ThreadPoolExecutor, bool)
  newCachedThreadPool()Ljava/util/concurrent/ExecutorService; = NewCachedThreadPool()
  newCachedThreadPool(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService; = NewCachedThreadPool(Java.Util.Concurrent.IThreadFactory)
  uiThread()Ljava/util/concurrent/Executor; = UiThread()
com/vivalnk/sdk/common/excutors/LooperPool = Com.Vivalnk.Sdk.Common.Excutors.LooperPool
  getMainHandler()Landroid/os/Handler; = MainHandler
  getMainLooper()Landroid/os/Looper; = MainLooper
  createHandler(Lcom/vivalnk/sdk/common/excutors/LooperType;)Landroid/os/Handler; = CreateHandler(Com.Vivalnk.Sdk.Common.Excutors.LooperType)
  createHandler(Lcom/vivalnk/sdk/common/excutors/LooperType;Landroid/os/Handler$Callback;)Landroid/os/Handler; = CreateHandler(Com.Vivalnk.Sdk.Common.Excutors.LooperType, Android.OS.Handler.ICallback)
  getLooper(Lcom/vivalnk/sdk/common/excutors/LooperType;)Landroid/os/Looper; = GetLooper(Com.Vivalnk.Sdk.Common.Excutors.LooperType)
  getMainHandler(Landroid/os/Handler$Callback;)Landroid/os/Handler; = GetMainHandler(Android.OS.Handler.ICallback)
com/vivalnk/sdk/common/excutors/LooperType = Com.Vivalnk.Sdk.Common.Excutors.LooperType
  COMMAND = Command
  DATA = Data
  IO = Io
  LOG = Log
  valueOf(Ljava/lang/String;)Lcom/vivalnk/sdk/common/excutors/LooperType; = ValueOf(string)
  values()[Lcom/vivalnk/sdk/common/excutors/LooperType; = Values()
com/vivalnk/sdk/common/utils/algorithm/KalmanFilter = Com.Vivalnk.Sdk.Common.Utils.Algorithm.KalmanFilter
  <init>()V = .ctor()
  calculate(Ljava/util/ArrayList;)Ljava/util/ArrayList; = Calculate(System.Collections.Generic.IList<Java.Lang.Double>)
com/vivalnk/sdk/common/utils/ArrayUtils = Com.Vivalnk.Sdk.Common.Utils.ArrayUtils
  <init>()V = .ctor()
  spliceArrays([BI)Ljava/util/List; = SpliceArrays(byte[], int)
  spliceArrays([CI)Ljava/util/List; = SpliceArrays(char[], int)
  spliceArrays(Ljava/util/List;I)Ljava/util/List; = SpliceArrays(System.Collections.IList, int)
  spliceArrays([Ljava/lang/Object;I)Ljava/util/List; = SpliceArrays(Java.Lang.Object[], int)
com/vivalnk/sdk/common/utils/ByteUtils = Com.Vivalnk.Sdk.Common.Utils.ByteUtils
  <init>()V = .ctor()
  BYTE_MAX = ByteMax
  EMPTY_BYTES = EmptyBytes
  byte2Char([B)[C = Byte2Char(byte[])
  byte2CharOriginal([B)[C = Byte2CharOriginal(byte[])
  byte2Int2([B)I = Byte2Int2(byte[])
  byte2IntByStream([B)I = Byte2IntByStream(byte[])
  byte2Long([BI)J = Byte2Long(byte[], int)
  byte2Short([B)S = Byte2Short(byte[])
  byte2SignedInt([B)I = Byte2SignedInt(params byte[])
  byte2UnsignedInt([B)I = Byte2UnsignedInt(params byte[])
  byteEquals([B[B)Z = ByteEquals(byte[], byte[])
  byteToString([B)Ljava/lang/String; = ByteToString(byte[])
  char2Byte(C)B = Char2Byte(char)
  char2Byte([C)[B = Char2Byte(char[])
  copy([B[BII)V = Copy(byte[], byte[], int, int)
  cutAfterBytes([BB)[B = CutAfterBytes(byte[], sbyte)
  cutBeforeBytes([BB)[B = CutBeforeBytes(byte[], sbyte)
  equals([B[B)Z = Equals(byte[], byte[])
  equals([B[BI)Z = Equals(byte[], byte[], int)
  fillBeforeBytes([BIB)[B = FillBeforeBytes(byte[], int, sbyte)
  fromInt(I)[B = FromInt(int)
  fromLong(J)[B = FromLong(long)
  fromShort(S)[B = FromShort(short)
  get([BI)[B = Get(byte[], int)
  get([BII)[B = Get(byte[], int, int)
  getByte(C)B = GetByte(char)
  getBytes([BII)[B = GetBytes(byte[], int, int)
  getBytes([C)[B = GetBytes(char[])
  getChar(B)C = GetChar(sbyte)
  getChars([B)[C = GetChars(byte[])
  getNonEmptyByte([B)[B = GetNonEmptyByte(byte[])
  getRawData([B)Ljava/lang/String; = GetRawData(byte[])
  getUnsignedByte(B)I = GetUnsignedByte(sbyte)
  getUnsignedInt(I)J = GetUnsignedInt(int)
  getUnSignedLong(J)J = GetUnSignedLong(long)
  getUnsignedShort(S)I = GetUnsignedShort(short)
  int2Byte(I)[B = Int2Byte(int)
  intArray2ByteArray([I)[B = IntArray2ByteArray(int[])
  isAllFF([B)Z = IsAllFF(byte[])
  isEmpty([B)Z = IsEmpty(byte[])
  long2Dword(J)[B = Long2Dword(long)
  reverse([B)[B = Reverse(byte[])
  short2Byte(S)[B = Short2Byte(short)
  stringToBytes(Ljava/lang/String;)[B = StringToBytes(string)
  toUnsignedInt(B)I = ToUnsignedInt(sbyte)
  toUnsignedLong(B)J = ToUnsignedLong(sbyte)
  trimLast([B)[B = TrimLast(byte[])
  ubyteToInt(B)I = UbyteToInt(sbyte)
com/vivalnk/sdk/common/utils/CharUtils = Com.Vivalnk.Sdk.Common.Utils.CharUtils
  <init>()V = .ctor()
  isASCII(C)Z = IsASCII(char)
  isASCIIString(Ljava/lang/String;)Z = IsASCIIString(string)
com/vivalnk/sdk/common/utils/ClsUtils = Com.Vivalnk.Sdk.Common.Utils.ClsUtils
  <init>()V = .ctor()
  cancelBondProcess(Ljava/lang/Class;Landroid/bluetooth/BluetoothDevice;)Z = CancelBondProcess(Java.Lang.Class, Android.Bluetooth.BluetoothDevice)
  cancelPairingUserInput(Ljava/lang/Class;Landroid/bluetooth/BluetoothDevice;)Z = CancelPairingUserInput(Java.Lang.Class, Android.Bluetooth.BluetoothDevice)
  createBond(Ljava/lang/Class;Landroid/bluetooth/BluetoothDevice;)Z = CreateBond(Java.Lang.Class, Android.Bluetooth.BluetoothDevice)
  printAllInform(Ljava/lang/Class;)V = PrintAllInform(Java.Lang.Class)
  removeBond(Ljava/lang/Class;Landroid/bluetooth/BluetoothDevice;)Z = RemoveBond(Java.Lang.Class, Android.Bluetooth.BluetoothDevice)
  setPairingConfirmation(Ljava/lang/Class;Landroid/bluetooth/BluetoothDevice;Z)V = SetPairingConfirmation(Java.Lang.Class, Android.Bluetooth.BluetoothDevice, bool)
  setPin(Ljava/lang/Class;Landroid/bluetooth/BluetoothDevice;Ljava/lang/String;)Z = SetPin(Java.Lang.Class, Android.Bluetooth.BluetoothDevice, string)
com/vivalnk/sdk/common/utils/CRC16 = Com.Vivalnk.Sdk.Common.Utils.CRC16
  <init>()V = .ctor()
  crc16([B)I = Crc16(byte[])
  main([Ljava/lang/String;)V = Main(string[])
com/vivalnk/sdk/common/utils/DensityUtils = Com.Vivalnk.Sdk.Common.Utils.DensityUtils
  <init>()V = .ctor()
  dip2px(Landroid/content/Context;F)I = Dip2px(Android.Content.Context, float)
  pt2Px(Landroid/content/Context;F)I = Pt2Px(Android.Content.Context, float)
  px2dip(Landroid/content/Context;F)I = Px2dip(Android.Content.Context, float)
  px2Pt(Landroid/content/Context;F)I = Px2Pt(Android.Content.Context, float)
com/vivalnk/sdk/common/utils/EventBusHelper = Com.Vivalnk.Sdk.Common.Utils.EventBusHelper
  <init>()V = .ctor()
  getDefault()Lcom/vivalnk/sdk/common/eventbus/EventBus; = Default
  register(Ljava/lang/Object;)V = Register(Java.Lang.Object)
  unregister(Ljava/lang/Object;)V = Unregister(Java.Lang.Object)
com/vivalnk/sdk/common/utils/FileUtils = Com.Vivalnk.Sdk.Common.Utils.FileUtils
  FILE_EXTENSION_SEPARATOR = FileExtensionSeparator
  getDiskAvailableSize()J = DiskAvailableSize
  isDiskSpaceAvailable()Z = IsDiskSpaceAvailable
  isExternalStorageReadable()Z = IsExternalStorageReadable
  isExternalStorageWritable()Z = IsExternalStorageWritable
  isSDCardAvailable()Z = IsSDCardAvailable
  copy(Ljava/io/InputStream;Ljava/lang/String;)Z = Copy(System.IO.Stream, string)
  copy(Ljava/lang/String;Ljava/lang/String;)Z = Copy(string, string)
  copyFile(Ljava/lang/String;Ljava/lang/String;)Z = CopyFile(string, string)
  deleteFile(Ljava/io/File;)Z = DeleteFile(Java.IO.File)
  deleteFile(Ljava/lang/String;)Z = DeleteFile(string)
  getDataDir(Landroid/content/Context;)Ljava/io/File; = GetDataDir(Android.Content.Context)
  getFileExtension(Ljava/lang/String;)Ljava/lang/String; = GetFileExtension(string)
  getFileName(Ljava/lang/String;)Ljava/lang/String; = GetFileName(string)
  getFileNameWithoutExtension(Ljava/lang/String;)Ljava/lang/String; = GetFileNameWithoutExtension(string)
  getFileOrDirSize(Ljava/io/File;)J = GetFileOrDirSize(Java.IO.File)
  getFileSize(Ljava/lang/String;)J = GetFileSize(string)
  getFolderName(Ljava/lang/String;)Ljava/lang/String; = GetFolderName(string)
  hasSDCardPermission(Landroid/content/Context;)Z = HasSDCardPermission(Android.Content.Context)
  isFileExist(Ljava/lang/String;)Z = IsFileExist(string)
  isFolderExist(Ljava/lang/String;)Z = IsFolderExist(string)
  makeDirs(Ljava/lang/String;)Z = MakeDirs(string)
  makeFile(Ljava/lang/String;)Z = MakeFile(string)
  makeFolders(Ljava/lang/String;)Z = MakeFolders(string)
  moveFile(Ljava/io/File;Ljava/io/File;)V = MoveFile(Java.IO.File, Java.IO.File)
  moveFile(Ljava/lang/String;Ljava/lang/String;)V = MoveFile(string, string)
  readFile(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/StringBuilder; = ReadFile(string, string)
  readFileToList(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List; = ReadFileToList(string, string)
  readToString(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = ReadToString(string, string)
  writeFile(Ljava/io/File;Ljava/io/InputStream;)Z = WriteFile(Java.IO.File, System.IO.Stream)
  writeFile(Ljava/io/File;Ljava/io/InputStream;Z)Z = WriteFile(Java.IO.File, System.IO.Stream, bool)
  writeFile(Ljava/lang/String;Ljava/io/InputStream;)Z = WriteFile(string, System.IO.Stream)
  writeFile(Ljava/lang/String;Ljava/io/InputStream;Z)Z = WriteFile(string, System.IO.Stream, bool)
  writeFile(Ljava/lang/String;Ljava/lang/String;)Z = WriteFile(string, string)
  writeFile(Ljava/lang/String;Ljava/lang/String;Z)Z = WriteFile(string, string, bool)
  writeFile(Ljava/lang/String;Ljava/util/List;)Z = WriteFile(string, System.Collections.Generic.IList<string>)
  writeFile(Ljava/lang/String;Ljava/util/List;Z)Z = WriteFile(string, System.Collections.Generic.IList<string>, bool)
com/vivalnk/sdk/common/utils/GPSUtils = Com.Vivalnk.Sdk.Common.Utils.GPSUtils
  <init>()V = .ctor()
  isGPSEnable(Landroid/content/Context;)Z = IsGPSEnable(Android.Content.Context)
  isLocationEnabled(Landroid/content/Context;)Z = IsLocationEnabled(Android.Content.Context)
com/vivalnk/sdk/common/utils/hook/BluetoothGattProxyHandler = Com.Vivalnk.Sdk.Common.Utils.Hook.BluetoothGattProxyHandler
  invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object; = Invoke(Java.Lang.Object, Java.Lang.Reflect.Method, Java.Lang.Object[])
com/vivalnk/sdk/common/utils/hook/BluetoothHooker = Com.Vivalnk.Sdk.Common.Utils.Hook.BluetoothHooker
  <init>()V = .ctor()
  hook()V = Hook()
com/vivalnk/sdk/common/utils/hook/BluetoothManagerBinderProxyHandler = Com.Vivalnk.Sdk.Common.Utils.Hook.BluetoothManagerBinderProxyHandler
  invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object; = Invoke(Java.Lang.Object, Java.Lang.Reflect.Method, Java.Lang.Object[])
com/vivalnk/sdk/common/utils/hook/BluetoothManagerProxyHandler = Com.Vivalnk.Sdk.Common.Utils.Hook.BluetoothManagerProxyHandler
  invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object; = Invoke(Java.Lang.Object, Java.Lang.Reflect.Method, Java.Lang.Object[])
com/vivalnk/sdk/common/utils/hook/compat/ServiceManagerCompat = Com.Vivalnk.Sdk.Common.Utils.Hook.Compat.ServiceManagerCompat
  <init>()V = .ctor()
  getCacheField()Ljava/lang/reflect/Field; = CacheField
  getCacheValue()Ljava/util/HashMap; = CacheValue
  getService()Ljava/lang/reflect/Method; = Service
  getServiceManager()Ljava/lang/Class; = ServiceManager
com/vivalnk/sdk/common/utils/hook/utils/FieldUtils = Com.Vivalnk.Sdk.Common.Utils.Hook.Utils.FieldUtils
  <init>()V = .ctor()
  getDeclaredField(Ljava/lang/Class;Ljava/lang/String;Z)Ljava/lang/reflect/Field; = GetDeclaredField(Java.Lang.Class, string, bool)
com/vivalnk/sdk/common/utils/hook/utils/HookUtils = Com.Vivalnk.Sdk.Common.Utils.Hook.Utils.HookUtils
  <init>()V = .ctor()
  getClass(Ljava/lang/String;)Ljava/lang/Class; = GetClass(string)
  getField(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Field; = GetField(Java.Lang.Class, string)
  getMethod(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; = GetMethod(Java.Lang.Class, string, params Java.Lang.Class[])
  getValue(Ljava/lang/reflect/Field;)Ljava/lang/Object; = GetValue(Java.Lang.Reflect.Field)
  getValue(Ljava/lang/reflect/Field;Ljava/lang/Object;)Ljava/lang/Object; = GetValue(Java.Lang.Reflect.Field, Java.Lang.Object)
  invoke(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; = Invoke(Java.Lang.Reflect.Method, Java.Lang.Object, params Java.Lang.Object[])
com/vivalnk/sdk/common/utils/hook/utils/MemberUtils = Com.Vivalnk.Sdk.Common.Utils.Hook.Utils.MemberUtils
  <init>()V = .ctor()
com/vivalnk/sdk/common/utils/hook/utils/MethodUtils = Com.Vivalnk.Sdk.Common.Utils.Hook.Utils.MethodUtils
  <init>()V = .ctor()
  getAccessibleMethod(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; = GetAccessibleMethod(Java.Lang.Class, string, params Java.Lang.Class[])
  getAccessibleMethod(Ljava/lang/reflect/Method;)Ljava/lang/reflect/Method; = GetAccessibleMethod(Java.Lang.Reflect.Method)
com/vivalnk/sdk/common/utils/hook/utils/Validate = Com.Vivalnk.Sdk.Common.Utils.Hook.Utils.Validate
  <init>()V = .ctor()
  isTrue(ZLjava/lang/String;[Ljava/lang/Object;)V = IsTrue(bool, string, params Java.Lang.Object[])
com/vivalnk/sdk/common/utils/IOUtils = Com.Vivalnk.Sdk.Common.Utils.IOUtils
  close(Ljava/io/Closeable;)V = Close(Java.IO.ICloseable)
  closeQuietly(Ljava/io/Closeable;)V = CloseQuietly(Java.IO.ICloseable)
  copy(Ljava/io/InputStream;Ljava/io/OutputStream;)V = Copy(System.IO.Stream, System.IO.Stream)
  deleteFileOrDir(Ljava/io/File;)Z = DeleteFileOrDir(Java.IO.File)
com/vivalnk/sdk/common/utils/ListUtils = Com.Vivalnk.Sdk.Common.Utils.ListUtils
  <init>()V = .ctor()
  getEmptyList()Ljava/util/List; = EmptyList
  isEmpty(Ljava/util/List;)Z = IsEmpty(System.Collections.Generic.IList<object>)
  isEmpty([Ljava/lang/Object;)Z = IsEmpty(params Java.Lang.Object[])
com/vivalnk/sdk/common/utils/log/LogFileManager = Com.Vivalnk.Sdk.Common.Utils.Log.LogFileManager
  getInstance()Lcom/vivalnk/sdk/common/utils/log/LogFileManager; = Instance
  handleMessage(Landroid/os/Message;)Z = HandleMessage(Android.OS.Message)
  init(Landroid/content/Context;Ljava/lang/String;)V = Init(Android.Content.Context, string)
  init(Landroid/content/Context;Ljava/lang/String;II)V = Init(Android.Content.Context, string, int, int)
  init(Landroid/content/Context;Ljava/lang/String;III)V = Init(Android.Content.Context, string, int, int, int)
  writeLogToFile(Lcom/vivalnk/sdk/common/utils/log/LogInfo;)V = WriteLogToFile(Com.Vivalnk.Sdk.Common.Utils.Log.LogInfo)
  writeLogToFile(Ljava/lang/String;)V = WriteLogToFile(string)
com/vivalnk/sdk/common/utils/log/LogInfo = Com.Vivalnk.Sdk.Common.Utils.Log.LogInfo
  <init>()V = .ctor()
  message = Message
  priority = Priority
  tag = Tag
  threadInfo = ThreadInfo
  timeStamp = TimeStamp
  getInfo()Ljava/lang/String; = Info
com/vivalnk/sdk/common/utils/log/LogLevel = Com.Vivalnk.Sdk.Common.Utils.Log.LogLevel
  ALL = All
  ASSERT = Assert
  DEBUG = Debug
  ERROR = Error
  INFO = Info
  INTERNAL = Internal
  NOTHING = Nothing
  VERBOSE = Verbose
  WARN = Warn
  value()I = Value()
  valueOf(I)Lcom/vivalnk/sdk/common/utils/log/LogLevel; = ValueOf(int)
  valueOf(Ljava/lang/String;)Lcom/vivalnk/sdk/common/utils/log/LogLevel; = ValueOf(string)
  values()[Lcom/vivalnk/sdk/common/utils/log/LogLevel; = Values()
com/vivalnk/sdk/common/utils/log/LogUtils = Com.Vivalnk.Sdk.Common.Utils.Log.LogUtils
  <init>()V = .ctor()
  logLevel = LogLevel
  mContext = MContext
  tag = Tag
  alloWriteToFile(Z)V = AlloWriteToFile(bool)
  closeLog()V = CloseLog()
  d(ZZLjava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = D(bool, bool, string, Java.Lang.Throwable, string, params Java.Lang.Object[])
  d(Ljava/lang/String;[Ljava/lang/Object;)V = D(string, params Java.Lang.Object[])
  d(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V = D(string, string, params Java.Lang.Object[])
  d(Ljava/lang/String;Ljava/lang/Throwable;)V = D(string, Java.Lang.Throwable)
  d(Ljava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = D(string, Java.Lang.Throwable, string, params Java.Lang.Object[])
  d(Ljava/lang/Throwable;)V = D(Java.Lang.Throwable)
  d(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = D(Java.Lang.Throwable, string, params Java.Lang.Object[])
  doLog(ZZLcom/vivalnk/sdk/common/utils/log/LogLevel;Ljava/lang/String;Ljava/lang/String;)V = DoLog(bool, bool, Com.Vivalnk.Sdk.Common.Utils.Log.LogLevel, string, string)
  e(ZZLjava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = E(bool, bool, string, Java.Lang.Throwable, string, params Java.Lang.Object[])
  e(Ljava/lang/String;[Ljava/lang/Object;)V = E(string, params Java.Lang.Object[])
  e(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V = E(string, string, params Java.Lang.Object[])
  e(Ljava/lang/String;Ljava/lang/Throwable;)V = E(string, Java.Lang.Throwable)
  e(Ljava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = E(string, Java.Lang.Throwable, string, params Java.Lang.Object[])
  e(Ljava/lang/Throwable;)V = E(Java.Lang.Throwable)
  e(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = E(Java.Lang.Throwable, string, params Java.Lang.Object[])
  formatMessage(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; = FormatMessage(string, Java.Lang.Object[])
  getStackTraceString(Ljava/lang/Throwable;)Ljava/lang/String; = GetStackTraceString(Java.Lang.Throwable)
  i(ZZLjava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = I(bool, bool, string, Java.Lang.Throwable, string, params Java.Lang.Object[])
  i(Ljava/lang/String;[Ljava/lang/Object;)V = I(string, params Java.Lang.Object[])
  i(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V = I(string, string, params Java.Lang.Object[])
  i(Ljava/lang/String;Ljava/lang/Throwable;)V = I(string, Java.Lang.Throwable)
  i(Ljava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = I(string, Java.Lang.Throwable, string, params Java.Lang.Object[])
  i(Ljava/lang/Throwable;)V = I(Java.Lang.Throwable)
  i(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = I(Java.Lang.Throwable, string, params Java.Lang.Object[])
  init(Landroid/content/Context;)V = Init(Android.Content.Context)
  init(Landroid/content/Context;Ljava/lang/String;)V = Init(Android.Content.Context, string)
  init(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = Init(Android.Content.Context, string, string)
  init(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;II)V = Init(Android.Content.Context, string, string, int, int)
  internal(ZZLjava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = Internal(bool, bool, string, Java.Lang.Throwable, string, params Java.Lang.Object[])
  internal(Ljava/lang/String;[Ljava/lang/Object;)V = Internal(string, params Java.Lang.Object[])
  internal(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V = Internal(string, string, params Java.Lang.Object[])
  internal(Ljava/lang/String;Ljava/lang/Throwable;)V = Internal(string, Java.Lang.Throwable)
  internal(Ljava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = Internal(string, Java.Lang.Throwable, string, params Java.Lang.Object[])
  internal(Ljava/lang/Throwable;)V = Internal(Java.Lang.Throwable)
  internal(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = Internal(Java.Lang.Throwable, string, params Java.Lang.Object[])
  isLoggable(Ljava/lang/String;Lcom/vivalnk/sdk/common/utils/log/LogLevel;)Z = IsLoggable(string, Com.Vivalnk.Sdk.Common.Utils.Log.LogLevel)
  log(ZZLjava/lang/String;Lcom/vivalnk/sdk/common/utils/log/LogLevel;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = Log(bool, bool, string, Com.Vivalnk.Sdk.Common.Utils.Log.LogLevel, Java.Lang.Throwable, string, params Java.Lang.Object[])
  log(Ljava/lang/String;Lcom/vivalnk/sdk/common/utils/log/LogLevel;Ljava/lang/String;[Ljava/lang/Object;)V = Log(string, Com.Vivalnk.Sdk.Common.Utils.Log.LogLevel, string, params Java.Lang.Object[])
  log(Ljava/lang/String;Lcom/vivalnk/sdk/common/utils/log/LogLevel;Ljava/lang/Throwable;)V = Log(string, Com.Vivalnk.Sdk.Common.Utils.Log.LogLevel, Java.Lang.Throwable)
  log(Ljava/lang/String;Lcom/vivalnk/sdk/common/utils/log/LogLevel;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = Log(string, Com.Vivalnk.Sdk.Common.Utils.Log.LogLevel, Java.Lang.Throwable, string, params Java.Lang.Object[])
  openLog()V = OpenLog()
  prepareLog(ZZLjava/lang/String;Lcom/vivalnk/sdk/common/utils/log/LogLevel;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = PrepareLog(bool, bool, string, Com.Vivalnk.Sdk.Common.Utils.Log.LogLevel, Java.Lang.Throwable, string, params Java.Lang.Object[])
  prepareLog(Ljava/lang/String;Lcom/vivalnk/sdk/common/utils/log/LogLevel;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = PrepareLog(string, Com.Vivalnk.Sdk.Common.Utils.Log.LogLevel, Java.Lang.Throwable, string, params Java.Lang.Object[])
  printStacktraceString()V = PrintStacktraceString()
  printToLogcat(Lcom/vivalnk/sdk/common/utils/log/LogInfo;)V = PrintToLogcat(Com.Vivalnk.Sdk.Common.Utils.Log.LogInfo)
  setLogLevel(Lcom/vivalnk/sdk/common/utils/log/LogLevel;)V = SetLogLevel(Com.Vivalnk.Sdk.Common.Utils.Log.LogLevel)
  v(ZZLjava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = V(bool, bool, string, Java.Lang.Throwable, string, params Java.Lang.Object[])
  v(Ljava/lang/String;[Ljava/lang/Object;)V = V(string, params Java.Lang.Object[])
  v(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V = V(string, string, params Java.Lang.Object[])
  v(Ljava/lang/String;Ljava/lang/Throwable;)V = V(string, Java.Lang.Throwable)
  v(Ljava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = V(string, Java.Lang.Throwable, string, params Java.Lang.Object[])
  v(Ljava/lang/Throwable;)V = V(Java.Lang.Throwable)
  v(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = V(Java.Lang.Throwable, string, params Java.Lang.Object[])
  w(ZZLjava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = W(bool, bool, string, Java.Lang.Throwable, string, params Java.Lang.Object[])
  w(Ljava/lang/String;[Ljava/lang/Object;)V = W(string, params Java.Lang.Object[])
  w(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V = W(string, string, params Java.Lang.Object[])
  w(Ljava/lang/String;Ljava/lang/Throwable;)V = W(string, Java.Lang.Throwable)
  w(Ljava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = W(string, Java.Lang.Throwable, string, params Java.Lang.Object[])
  w(Ljava/lang/Throwable;)V = W(Java.Lang.Throwable)
  w(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = W(Java.Lang.Throwable, string, params Java.Lang.Object[])
  writeStackTraceString()V = WriteStackTraceString()
  writeToFile(Lcom/vivalnk/sdk/common/utils/log/LogInfo;)V = WriteToFile(Com.Vivalnk.Sdk.Common.Utils.Log.LogInfo)
  wtf(ZZLjava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = Wtf(bool, bool, string, Java.Lang.Throwable, string, params Java.Lang.Object[])
  wtf(Ljava/lang/String;[Ljava/lang/Object;)V = Wtf(string, params Java.Lang.Object[])
  wtf(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V = Wtf(string, string, params Java.Lang.Object[])
  wtf(Ljava/lang/String;Ljava/lang/Throwable;)V = Wtf(string, Java.Lang.Throwable)
  wtf(Ljava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = Wtf(string, Java.Lang.Throwable, string, params Java.Lang.Object[])
  wtf(Ljava/lang/Throwable;)V = Wtf(Java.Lang.Throwable)
  wtf(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V = Wtf(Java.Lang.Throwable, string, params Java.Lang.Object[])
com/vivalnk/sdk/common/utils/log/VitalLog = Com.Vivalnk.Sdk.Common.Utils.Log.VitalLog
  <init>()V = .ctor()
  init(Landroid/content/Context;)V = Init(Android.Content.Context)
  printD(Ljava/lang/String;)V = PrintD(string)
  printE(Ljava/lang/String;)V = PrintE(string)
  printI(Ljava/lang/String;)V = PrintI(string)
  printV(Ljava/lang/String;)V = PrintV(string)
  printW(Ljava/lang/String;)V = PrintW(string)
  printWTF(Ljava/lang/String;)V = PrintWTF(string)
  writeD(Ljava/lang/String;)V = WriteD(string)
  writeE(Ljava/lang/String;)V = WriteE(string)
  writeI(Ljava/lang/String;)V = WriteI(string)
  writeV(Ljava/lang/String;)V = WriteV(string)
  writeW(Ljava/lang/String;)V = WriteW(string)
  writeWTF(Ljava/lang/String;)V = WriteWTF(string)
com/vivalnk/sdk/common/utils/MD5Utils = Com.Vivalnk.Sdk.Common.Utils.MD5Utils
  <init>()V = .ctor()
  MD5_12(Ljava/lang/String;)[B = MD5_12(string)
com/vivalnk/sdk/common/utils/PermissionHelper = Com.Vivalnk.Sdk.Common.Utils.PermissionHelper
  <init>()V = .ctor()
  hasPermission(Landroid/content/Context;Ljava/lang/String;)Z = HasPermission(Android.Content.Context, string)
com/vivalnk/sdk/common/utils/proxy/ProxyBulk = Com.Vivalnk.Sdk.Common.Utils.Proxy.ProxyBulk
  <init>(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)V = .ctor(Java.Lang.Object, Java.Lang.Reflect.Method, Java.Lang.Object[])
  args = Args
  method = Method
  object = Object
  safeInvoke()Ljava/lang/Object; = SafeInvoke()
  safeInvoke(Ljava/lang/Object;)Ljava/lang/Object; = SafeInvoke(Java.Lang.Object)
com/vivalnk/sdk/common/utils/proxy/ProxyInterceptor = Com.Vivalnk.Sdk.Common.Utils.Proxy.IProxyInterceptor
  onIntercept(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Z = OnIntercept(Java.Lang.Object, Java.Lang.Reflect.Method, Java.Lang.Object[])
com/vivalnk/sdk/common/utils/proxy/ProxyInvocationHandler = Com.Vivalnk.Sdk.Common.Utils.Proxy.ProxyInvocationHandler
  <init>(Ljava/lang/Object;)V = .ctor(Java.Lang.Object)
  <init>(Ljava/lang/Object;Lcom/vivalnk/sdk/common/utils/proxy/ProxyInterceptor;)V = .ctor(Java.Lang.Object, Com.Vivalnk.Sdk.Common.Utils.Proxy.IProxyInterceptor)
  <init>(Ljava/lang/Object;Lcom/vivalnk/sdk/common/utils/proxy/ProxyInterceptor;Z)V = .ctor(Java.Lang.Object, Com.Vivalnk.Sdk.Common.Utils.Proxy.IProxyInterceptor, bool)
  <init>(Ljava/lang/Object;Lcom/vivalnk/sdk/common/utils/proxy/ProxyInterceptor;ZZ)V = .ctor(Java.Lang.Object, Com.Vivalnk.Sdk.Common.Utils.Proxy.IProxyInterceptor, bool, bool)
  handleMessage(Landroid/os/Message;)Z = HandleMessage(Android.OS.Message)
  invoke(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object; = Invoke(Java.Lang.Object, Java.Lang.Reflect.Method, Java.Lang.Object[])
  onIntercept(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Z = OnIntercept(Java.Lang.Object, Java.Lang.Reflect.Method, Java.Lang.Object[])
com/vivalnk/sdk/common/utils/proxy/ProxyUtils = Com.Vivalnk.Sdk.Common.Utils.Proxy.ProxyUtils
  <init>()V = .ctor()
  getProxy(Ljava/lang/Object;Lcom/vivalnk/sdk/common/utils/proxy/ProxyInterceptor;)Ljava/lang/Object; = GetProxy(Java.Lang.Object, Com.Vivalnk.Sdk.Common.Utils.Proxy.IProxyInterceptor)
  getProxy(Ljava/lang/Object;Ljava/lang/Class;Lcom/vivalnk/sdk/common/utils/proxy/ProxyInterceptor;)Ljava/lang/Object; = GetProxy(Java.Lang.Object, Java.Lang.Class, Com.Vivalnk.Sdk.Common.Utils.Proxy.IProxyInterceptor)
  getProxy(Ljava/lang/Object;Ljava/lang/Class;Lcom/vivalnk/sdk/common/utils/proxy/ProxyInterceptor;ZZ)Ljava/lang/Object; = GetProxy(Java.Lang.Object, Java.Lang.Class, Com.Vivalnk.Sdk.Common.Utils.Proxy.IProxyInterceptor, bool, bool)
  getProxy(Ljava/lang/Object;[Ljava/lang/Class;Lcom/vivalnk/sdk/common/utils/proxy/ProxyInterceptor;ZZ)Ljava/lang/Object; = GetProxy(Java.Lang.Object, Java.Lang.Class[], Com.Vivalnk.Sdk.Common.Utils.Proxy.IProxyInterceptor, bool, bool)
  getUIProxy(Ljava/lang/Object;)Ljava/lang/Object; = GetUIProxy(Java.Lang.Object)
  getUIProxy(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object; = GetUIProxy(Java.Lang.Object, Java.Lang.Class)
  getUIProxy(Ljava/lang/Object;Ljava/lang/Class;Lcom/vivalnk/sdk/common/utils/proxy/ProxyInterceptor;)Ljava/lang/Object; = GetUIProxy(Java.Lang.Object, Java.Lang.Class, Com.Vivalnk.Sdk.Common.Utils.Proxy.IProxyInterceptor)
  getUIProxy(Ljava/lang/Object;[Ljava/lang/Class;Lcom/vivalnk/sdk/common/utils/proxy/ProxyInterceptor;)Ljava/lang/Object; = GetUIProxy(Java.Lang.Object, Java.Lang.Class[], Com.Vivalnk.Sdk.Common.Utils.Proxy.IProxyInterceptor)
  getWeakUIProxy(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object; = GetWeakUIProxy(Java.Lang.Object, Java.Lang.Class)
com/vivalnk/sdk/common/utils/RandomUtils = Com.Vivalnk.Sdk.Common.Utils.RandomUtils
  <init>()V = .ctor()
  nextDouble()D = NextDouble()
  nextInt()D = NextInt()
  nextLong()D = NextLong()
com/vivalnk/sdk/common/utils/StackUtils = Com.Vivalnk.Sdk.Common.Utils.StackUtils
  <init>()V = .ctor()
  getClassName()Ljava/lang/String; = ClassName
  getFileName()Ljava/lang/String; = FileName
  getLineNumber()I = LineNumber
  getMethodName()Ljava/lang/String; = MethodName
com/vivalnk/sdk/common/utils/StringUtils = Com.Vivalnk.Sdk.Common.Utils.StringUtils
  <init>()V = .ctor()
  isBlank(Ljava/lang/String;)Z = IsBlank(string)
  isEmpty(Ljava/lang/CharSequence;)Z = IsEmpty(Java.Lang.ICharSequence)
  isNotBlank(Ljava/lang/String;)Z = IsNotBlank(string)
com/vivalnk/sdk/common/utils/VersionUtils = Com.Vivalnk.Sdk.Common.Utils.VersionUtils
  <init>()V = .ctor()
  compareVersion(Ljava/lang/String;Ljava/lang/String;)I = CompareVersion(string, string)
com/vivalnk/sdk/utils/Arith = Com.Vivalnk.Sdk.Utils.Arith
  add(DD)D = Add(double, double)
  div(DD)D = Div(double, double)
  div(DDI)D = Div(double, double, int)
  main([Ljava/lang/String;)V = Main(string[])
  mul(DD)D = Mul(double, double)
  random(I)I = Random(int)
  round(DI)D = Round(double, int)
  sub(DD)D = Sub(double, double)
com/vivalnk/sdk/utils/ArrayUtils = Com.Vivalnk.Sdk.Utils.ArrayUtils
  <init>()V = .ctor()
  concatAll([Ljava/lang/Object;[[Ljava/lang/Object;)[Ljava/lang/Object; = ConcatAll(Java.Lang.Object[], params Java.Lang.Object[][])
  contact([B[B)[B = Contact(byte[], byte[])
  contact([F[F)[F = Contact(float[], float[])
  contact([I[I)[I = Contact(int[], int[])
  contact([S[S)[S = Contact(short[], short[])
  contactInteger([I[I)[I = ContactInteger(int[], int[])
com/vivalnk/sdk/utils/DateFormat = Com.Vivalnk.Sdk.Utils.DateFormat
  <init>()V = .ctor()
  sPattern = SPattern
  format(Ljava/util/Date;)Ljava/lang/String; = Format(Java.Util.Date)
  format(Ljava/util/Date;Ljava/lang/String;)Ljava/lang/String; = Format(Java.Util.Date, string)
  format(J)Ljava/lang/String; = Format(long)
  format(JLjava/lang/String;)Ljava/lang/String; = Format(long, string)
com/vivalnk/sdk/utils/GSON = Com.Vivalnk.Sdk.Utils.GSON
  <init>()V = .ctor()
  fromJson(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object; = FromJson(string, Java.Lang.Class)
  fromJson(Ljava/lang/String;Ljava/lang/reflect/Type;)Ljava/lang/Object; = FromJson(string, Java.Lang.Reflect.IType)
  toJson(Ljava/lang/Object;)Ljava/lang/String; = ToJson(Java.Lang.Object)
  toJson(Ljava/lang/Object;Ljava/lang/reflect/Type;)Ljava/lang/String; = ToJson(Java.Lang.Object, Java.Lang.Reflect.IType)
com/vivalnk/sdk/utils/ObjectPool = Com.Vivalnk.Sdk.Utils.ObjectPool
  <init>(Lcom/vivalnk/sdk/utils/ObjectPool$PoolObjectFactory;I)V = .ctor(Com.Vivalnk.Sdk.Utils.ObjectPool.IPoolObjectFactory, int)
  free(Ljava/lang/Object;)V = Free(Java.Lang.Object)
  newObject()Ljava/lang/Object; = NewObject()
com/vivalnk/sdk/utils/ObjectUtils = Com.Vivalnk.Sdk.Utils.ObjectUtils
  <init>()V = .ctor()
  getFieldsNameList(Ljava/lang/Class;)Ljava/util/List; = GetFieldsNameList(Java.Lang.Class)
  toMap(Ljava/lang/Object;)Ljava/util/Map; = ToMap(Java.Lang.Object)
